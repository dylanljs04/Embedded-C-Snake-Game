
adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006720  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f8  080069f8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a00  08006a00  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  08006a70  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006a70  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012303  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002745  00000000  00000000  000323de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00034b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de6  00000000  00000000  00035cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ff0  00000000  00000000  00036a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c07  00000000  00000000  00039a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d73d  00000000  00000000  0004e695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005680  00000000  00000000  000ebdd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000f1454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068a8 	.word	0x080068a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080068a8 	.word	0x080068a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_TIM_PeriodElapsedCallback>:

////the code below is an interrupt that is triggered on an Update event (i.e. when the timer reaches its ARR value)
////if you look at TIM2 in the .ioc file (the GUI tab) you will see it has a source of 84MHz, an ARR of 84000-1 and
////a prescaler of 10, meaning this interrupt will occur every 10 ms.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e00a      	b.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x24>
		  Xaxis = (uint16_t) rawValues[0];
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005a0:	801a      	strh	r2, [r3, #0]
		  Yaxis = (uint16_t) rawValues[1];
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005a4:	885a      	ldrh	r2, [r3, #2]
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005a8:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfa      	ldrb	r2, [r7, #15]
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d3ef      	bcc.n	800059a <HAL_TIM_PeriodElapsedCallback+0xe>
//	  sprintf(msg, "X axis: %hu \r\t\t", Xaxis);
//	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
//
//	  sprintf(msg, "Y axis: %hu \r\n", Yaxis);
//	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
  }
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	20000210 	.word	0x20000210
 80005cc:	2000020c 	.word	0x2000020c
 80005d0:	2000020e 	.word	0x2000020e
 80005d4:	20000084 	.word	0x20000084

080005d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	  currentMillis = HAL_GetTick();
 80005e2:	f001 fa09 	bl	80019f8 <HAL_GetTick>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005ea:	6013      	str	r3, [r2, #0]
	  if ((currentMillis - previousMillis > 300) & (game_option < 2))
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <HAL_GPIO_EXTI_Callback+0x80>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005fa:	bf8c      	ite	hi
 80005fc:	2301      	movhi	r3, #1
 80005fe:	2300      	movls	r3, #0
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	bf94      	ite	ls
 800060a:	2301      	movls	r3, #1
 800060c:	2300      	movhi	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4013      	ands	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00a      	beq.n	800062e <HAL_GPIO_EXTI_Callback+0x56>
	  {
	    game_option++; //For testing only
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 8000622:	801a      	strh	r2, [r3, #0]
	    previousMillis = currentMillis;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <HAL_GPIO_EXTI_Callback+0x80>)
 800062a:	6013      	str	r3, [r2, #0]

	  else if(currentMillis - previousMillis > 300){
		  game_option = 0;
		  previousMillis = currentMillis;
	  }
}
 800062c:	e00e      	b.n	800064c <HAL_GPIO_EXTI_Callback+0x74>
	  else if(currentMillis - previousMillis > 300){
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_GPIO_EXTI_Callback+0x80>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800063c:	d906      	bls.n	800064c <HAL_GPIO_EXTI_Callback+0x74>
		  game_option = 0;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_GPIO_EXTI_Callback+0x84>)
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
		  previousMillis = currentMillis;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <HAL_GPIO_EXTI_Callback+0x80>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000021c 	.word	0x2000021c
 8000658:	20000218 	.word	0x20000218
 800065c:	20000214 	.word	0x20000214

08000660 <clearscreen.2>:
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
  ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);

  // Functions for the LED Screen matrix Demo
  void clearscreen(){
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b087      	sub	sp, #28
 8000664:	af02      	add	r7, sp, #8
 8000666:	4664      	mov	r4, ip
 8000668:	f8c7 c004 	str.w	ip, [r7, #4]
  		for(uint8_t r = 0; r <11; r++){
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e034      	b.n	80006dc <clearscreen.2+0x7c>
			  data[0] = COM_REG;
 8000672:	23fd      	movs	r3, #253	; 0xfd
 8000674:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			  data[1] = PAGE_1;
 8000678:	2300      	movs	r3, #0
 800067a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 800067e:	23ea      	movs	r3, #234	; 0xea
 8000680:	b299      	uxth	r1, r3
 8000682:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8000686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2302      	movs	r3, #2
 800068e:	4817      	ldr	r0, [pc, #92]	; (80006ec <clearscreen.2+0x8c>)
 8000690:	f002 fe74 	bl	800337c <HAL_I2C_Master_Transmit>
			  //HAL_Delay(10);
			  data[0] = MAT_ROW[r];
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <clearscreen.2+0x90>)
 8000698:	5cd3      	ldrb	r3, [r2, r3]
 800069a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			  data[1] = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80006a4:	23ea      	movs	r3, #234	; 0xea
 80006a6:	b299      	uxth	r1, r3
 80006a8:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2302      	movs	r3, #2
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <clearscreen.2+0x8c>)
 80006b6:	f002 fe61 	bl	800337c <HAL_I2C_Master_Transmit>
			  //HAL_Delay(10);
			  for(uint8_t r = 0; r <11; r++){
 80006ba:	2300      	movs	r3, #0
 80006bc:	73bb      	strb	r3, [r7, #14]
 80006be:	e007      	b.n	80006d0 <clearscreen.2+0x70>
					screenstatus[r] = 0;
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	4423      	add	r3, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  for(uint8_t r = 0; r <11; r++){
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	3301      	adds	r3, #1
 80006ce:	73bb      	strb	r3, [r7, #14]
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	2b0a      	cmp	r3, #10
 80006d4:	d9f4      	bls.n	80006c0 <clearscreen.2+0x60>
  		for(uint8_t r = 0; r <11; r++){
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	3301      	adds	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	d9c7      	bls.n	8000672 <clearscreen.2+0x12>
  			  }
  		  }
  }
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	2000012c 	.word	0x2000012c
 80006f0:	080068e4 	.word	0x080068e4

080006f4 <main>:
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b099      	sub	sp, #100	; 0x64
 80006f8:	af00      	add	r7, sp, #0
int main(void)
 80006fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fe:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t r_size = 11;
 8000700:	230b      	movs	r3, #11
 8000702:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  uint8_t c_size = 7;
 8000706:	2307      	movs	r3, #7
 8000708:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  int score = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	65fb      	str	r3, [r7, #92]	; 0x5c
  int fruit_x = 6;
 8000710:	2306      	movs	r3, #6
 8000712:	61fb      	str	r3, [r7, #28]
  int fruit_y = 3;
 8000714:	2303      	movs	r3, #3
 8000716:	61bb      	str	r3, [r7, #24]
  int keep_playing = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	65bb      	str	r3, [r7, #88]	; 0x58
  int snakeX[4] = {0,0,0,0};
 800071c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  int snakeY[4] = {0,0,1,2};
 800072a:	4b8d      	ldr	r3, [pc, #564]	; (8000960 <main+0x26c>)
 800072c:	f107 0420 	add.w	r4, r7, #32
 8000730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int direction = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
  HAL_Init();
 800073a:	f001 f8f7 	bl	800192c <HAL_Init>
  SystemClock_Config();
 800073e:	f000 fc27 	bl	8000f90 <SystemClock_Config>
  MX_GPIO_Init();
 8000742:	f000 fdb7 	bl	80012b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000746:	f000 fd95 	bl	8001274 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800074a:	f000 fd69 	bl	8001220 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800074e:	f000 fc8b 	bl	8001068 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000752:	f000 fd17 	bl	8001184 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000756:	f000 fce7 	bl	8001128 <MX_I2C1_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 800075a:	2202      	movs	r2, #2
 800075c:	4981      	ldr	r1, [pc, #516]	; (8000964 <main+0x270>)
 800075e:	4882      	ldr	r0, [pc, #520]	; (8000968 <main+0x274>)
 8000760:	f001 face 	bl	8001d00 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000764:	4881      	ldr	r0, [pc, #516]	; (800096c <main+0x278>)
 8000766:	f003 ff27 	bl	80045b8 <HAL_TIM_Base_Start_IT>
		else{
			return 1;
		}

	}
	sprintf(msg, "\nPlayer Score: %d", score);
 800076a:	463b      	mov	r3, r7
 800076c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800076e:	4980      	ldr	r1, [pc, #512]	; (8000970 <main+0x27c>)
 8000770:	4618      	mov	r0, r3
 8000772:	f004 fed9 	bl	8005528 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd31 	bl	80001e0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	4639      	mov	r1, r7
 8000784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000788:	487a      	ldr	r0, [pc, #488]	; (8000974 <main+0x280>)
 800078a:	f004 fb58 	bl	8004e3e <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( HAL_I2C_IsDeviceReady(&hi2c1, LEDMAT_ADD, 2, HAL_MAX_DELAY) == HAL_OK){
 800078e:	23ea      	movs	r3, #234	; 0xea
 8000790:	b299      	uxth	r1, r3
 8000792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000796:	2202      	movs	r2, #2
 8000798:	4877      	ldr	r0, [pc, #476]	; (8000978 <main+0x284>)
 800079a:	f002 feed 	bl	8003578 <HAL_I2C_IsDeviceReady>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f4      	bne.n	800078e <main+0x9a>
		  keep_playing = check_keep_playing();
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	469c      	mov	ip, r3
 80007aa:	f000 fbd9 	bl	8000f60 <check_keep_playing.0>
 80007ae:	65b8      	str	r0, [r7, #88]	; 0x58
		  if((keep_playing == 1) & (game_option == 0 || (game_option == 1))){
 80007b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	bf0c      	ite	eq
 80007b6:	2301      	moveq	r3, #1
 80007b8:	2300      	movne	r3, #0
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b6f      	ldr	r3, [pc, #444]	; (800097c <main+0x288>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <main+0xd8>
 80007c4:	4b6d      	ldr	r3, [pc, #436]	; (800097c <main+0x288>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d101      	bne.n	80007d0 <main+0xdc>
 80007cc:	2301      	movs	r3, #1
 80007ce:	e000      	b.n	80007d2 <main+0xde>
 80007d0:	2300      	movs	r3, #0
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4013      	ands	r3, r2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f000 8099 	beq.w	8000914 <main+0x220>
			turnonscreen();
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	469c      	mov	ip, r3
 80007e8:	f000 f8ce 	bl	8000988 <turnonscreen.1>
			clearscreen();
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	469c      	mov	ip, r3
 80007f2:	f7ff ff35 	bl	8000660 <clearscreen.2>
			display_snake();
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	469c      	mov	ip, r3
 80007fc:	f000 f9f8 	bl	8000bf0 <display_snake.3>
			direction = move_direction(direction);
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	f107 0214 	add.w	r2, r7, #20
 8000806:	4694      	mov	ip, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f000 faa9 	bl	8000d60 <move_direction.5>
 800080e:	4603      	mov	r3, r0
 8000810:	617b      	str	r3, [r7, #20]
			new_head_x = new_x_coordinates(snakeX[3]);
 8000812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000814:	f107 0214 	add.w	r2, r7, #20
 8000818:	4694      	mov	ip, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fb32 	bl	8000e84 <new_x_coordinates.6>
 8000820:	4603      	mov	r3, r0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			new_head_y = new_y_coordinates(snakeY[3]);
 8000828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082a:	f107 0214 	add.w	r2, r7, #20
 800082e:	4694      	mov	ip, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fb5e 	bl	8000ef2 <new_y_coordinates.7>
 8000836:	4603      	mov	r3, r0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			change_coordinate(snakeX, snakeY, new_head_x, new_head_y);
 800083e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000842:	461a      	mov	r2, r3
 8000844:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8000848:	461c      	mov	r4, r3
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	f103 010c 	add.w	r1, r3, #12
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	f103 001c 	add.w	r0, r3, #28
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	469c      	mov	ip, r3
 8000860:	4623      	mov	r3, r4
 8000862:	f000 fa46 	bl	8000cf2 <change_coordinate.8>

			if((fruit_x == snakeX[3]) & (fruit_y == snakeY[3])){
 8000866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000868:	69fa      	ldr	r2, [r7, #28]
 800086a:	429a      	cmp	r2, r3
 800086c:	bf0c      	ite	eq
 800086e:	2301      	moveq	r3, #1
 8000870:	2300      	movne	r3, #0
 8000872:	b2da      	uxtb	r2, r3
 8000874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000876:	69b9      	ldr	r1, [r7, #24]
 8000878:	4299      	cmp	r1, r3
 800087a:	bf0c      	ite	eq
 800087c:	2301      	moveq	r3, #1
 800087e:	2300      	movne	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4013      	ands	r3, r2
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d033      	beq.n	80008f2 <main+0x1fe>
				score++;
 800088a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800088c:	3301      	adds	r3, #1
 800088e:	65fb      	str	r3, [r7, #92]	; 0x5c
				fruit_x = rand() % 11;
 8000890:	f004 fe6a 	bl	8005568 <rand>
 8000894:	4601      	mov	r1, r0
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <main+0x28c>)
 8000898:	fb83 2301 	smull	r2, r3, r3, r1
 800089c:	105a      	asrs	r2, r3, #1
 800089e:	17cb      	asrs	r3, r1, #31
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	1aca      	subs	r2, r1, r3
 80008ae:	61fa      	str	r2, [r7, #28]
				fruit_y = rand() % 7;
 80008b0:	f004 fe5a 	bl	8005568 <rand>
 80008b4:	4602      	mov	r2, r0
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <main+0x290>)
 80008b8:	fb83 1302 	smull	r1, r3, r3, r2
 80008bc:	4413      	add	r3, r2
 80008be:	1099      	asrs	r1, r3, #2
 80008c0:	17d3      	asrs	r3, r2, #31
 80008c2:	1ac9      	subs	r1, r1, r3
 80008c4:	460b      	mov	r3, r1
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	1ad1      	subs	r1, r2, r3
 80008cc:	61b9      	str	r1, [r7, #24]
				sprintf(msg, "\nPlayer Score: %d", score);
 80008ce:	463b      	mov	r3, r7
 80008d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80008d2:	4927      	ldr	r1, [pc, #156]	; (8000970 <main+0x27c>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f004 fe27 	bl	8005528 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc7f 	bl	80001e0 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4639      	mov	r1, r7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ec:	4821      	ldr	r0, [pc, #132]	; (8000974 <main+0x280>)
 80008ee:	f004 faa6 	bl	8004e3e <HAL_UART_Transmit>
				}

			if(game_option == 0){
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <main+0x288>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d103      	bne.n	8000902 <main+0x20e>
				HAL_Delay(300);
 80008fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008fe:	f001 f887 	bl	8001a10 <HAL_Delay>
			}

			if(game_option == 1){
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <main+0x288>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	f47f af41 	bne.w	800078e <main+0x9a>
				HAL_Delay(100);
 800090c:	2064      	movs	r0, #100	; 0x64
 800090e:	f001 f87f 	bl	8001a10 <HAL_Delay>
 8000912:	e73c      	b.n	800078e <main+0x9a>
			}

		  }

		  else if((keep_playing == 1) & (game_option == 2)){
 8000914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000916:	2b01      	cmp	r3, #1
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <main+0x288>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	bf0c      	ite	eq
 8000928:	2301      	moveq	r3, #1
 800092a:	2300      	movne	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4013      	ands	r3, r2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <main+0x256>
			display_pause();
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	469c      	mov	ip, r3
 800093c:	f000 f986 	bl	8000c4c <display_pause.9>
			HAL_Delay(300);
 8000940:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000944:	f001 f864 	bl	8001a10 <HAL_Delay>
 8000948:	e721      	b.n	800078e <main+0x9a>
		  }

		  else{
			display_end();
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	469c      	mov	ip, r3
 8000950:	f000 f8f6 	bl	8000b40 <display_end.11>
			HAL_Delay(300);
 8000954:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000958:	f001 f85a 	bl	8001a10 <HAL_Delay>
	  if( HAL_I2C_IsDeviceReady(&hi2c1, LEDMAT_ADD, 2, HAL_MAX_DELAY) == HAL_OK){
 800095c:	e717      	b.n	800078e <main+0x9a>
 800095e:	bf00      	nop
 8000960:	080068d4 	.word	0x080068d4
 8000964:	20000210 	.word	0x20000210
 8000968:	20000084 	.word	0x20000084
 800096c:	20000180 	.word	0x20000180
 8000970:	080068c0 	.word	0x080068c0
 8000974:	200001c8 	.word	0x200001c8
 8000978:	2000012c 	.word	0x2000012c
 800097c:	20000214 	.word	0x20000214
 8000980:	2e8ba2e9 	.word	0x2e8ba2e9
 8000984:	92492493 	.word	0x92492493

08000988 <turnonscreen.1>:
  void turnonscreen(){
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b085      	sub	sp, #20
 800098c:	af02      	add	r7, sp, #8
 800098e:	4664      	mov	r4, ip
 8000990:	f8c7 c004 	str.w	ip, [r7, #4]
  	  data[0] = COM_REG;
 8000994:	23fd      	movs	r3, #253	; 0xfd
 8000996:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  	  data[1] = FUN_REG;
 800099a:	230b      	movs	r3, #11
 800099c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  	  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80009a0:	23ea      	movs	r3, #234	; 0xea
 80009a2:	b299      	uxth	r1, r3
 80009a4:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2302      	movs	r3, #2
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <turnonscreen.1+0x58>)
 80009b2:	f002 fce3 	bl	800337c <HAL_I2C_Master_Transmit>
  	  data[0] = 0x0A; //shutdown on/off
 80009b6:	230a      	movs	r3, #10
 80009b8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  	  data[1] = 0x01; //on
 80009bc:	2301      	movs	r3, #1
 80009be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  	  HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 80009c2:	23ea      	movs	r3, #234	; 0xea
 80009c4:	b299      	uxth	r1, r3
 80009c6:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2302      	movs	r3, #2
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <turnonscreen.1+0x58>)
 80009d4:	f002 fcd2 	bl	800337c <HAL_I2C_Master_Transmit>
  }
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	2000012c 	.word	0x2000012c

080009e4 <addpixel.4>:
  void addpixel(uint8_t r, uint8_t c){
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
 80009f4:	4664      	mov	r4, ip
 80009f6:	f8c7 c000 	str.w	ip, [r7]
    	screenstatus[r] |= MAT_COL[c];
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4423      	add	r3, r4
 80009fe:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <addpixel.4+0x88>)
 8000a06:	5cd2      	ldrb	r2, [r2, r3]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	4423      	add	r3, r4
 8000a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    	data[0] = COM_REG;
 8000a14:	23fd      	movs	r3, #253	; 0xfd
 8000a16:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    	data[1] = PAGE_1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    	HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000a20:	23ea      	movs	r3, #234	; 0xea
 8000a22:	b299      	uxth	r1, r3
 8000a24:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2302      	movs	r3, #2
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <addpixel.4+0x8c>)
 8000a32:	f002 fca3 	bl	800337c <HAL_I2C_Master_Transmit>
    	data[0] = MAT_ROW[r];
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <addpixel.4+0x90>)
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    	data[1] = screenstatus[r];
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4423      	add	r3, r4
 8000a44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    	HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000a4c:	23ea      	movs	r3, #234	; 0xea
 8000a4e:	b299      	uxth	r1, r3
 8000a50:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <addpixel.4+0x8c>)
 8000a5e:	f002 fc8d 	bl	800337c <HAL_I2C_Master_Transmit>
    }
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	080068f0 	.word	0x080068f0
 8000a70:	2000012c 	.word	0x2000012c
 8000a74:	080068e4 	.word	0x080068e4

08000a78 <pwm_pixel_pause.10>:
  void pwm_pixel_pause(){
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	4664      	mov	r4, ip
 8000a80:	f8c7 c004 	str.w	ip, [r7, #4]
    	data[0] = COM_REG;
 8000a84:	23fd      	movs	r3, #253	; 0xfd
 8000a86:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    	data[1] = PAGE_1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    	HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000a90:	23ea      	movs	r3, #234	; 0xea
 8000a92:	b299      	uxth	r1, r3
 8000a94:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	4826      	ldr	r0, [pc, #152]	; (8000b3c <pwm_pixel_pause.10+0xc4>)
 8000aa2:	f002 fc6b 	bl	800337c <HAL_I2C_Master_Transmit>
    	for(uint8_t i = 0x54; i< 0x5B; i ++){
 8000aa6:	2354      	movs	r3, #84	; 0x54
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e013      	b.n	8000ad4 <pwm_pixel_pause.10+0x5c>
        	data[0] = i;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
        	data[1] = 0x0A;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        	HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000ab8:	23ea      	movs	r3, #234	; 0xea
 8000aba:	b299      	uxth	r1, r3
 8000abc:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	481c      	ldr	r0, [pc, #112]	; (8000b3c <pwm_pixel_pause.10+0xc4>)
 8000aca:	f002 fc57 	bl	800337c <HAL_I2C_Master_Transmit>
    	for(uint8_t i = 0x54; i< 0x5B; i ++){
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b5a      	cmp	r3, #90	; 0x5a
 8000ad8:	d9e8      	bls.n	8000aac <pwm_pixel_pause.10+0x34>
    	data[0] = COM_REG;
 8000ada:	23fd      	movs	r3, #253	; 0xfd
 8000adc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    	data[1] = PAGE_1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    	HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000ae6:	23ea      	movs	r3, #234	; 0xea
 8000ae8:	b299      	uxth	r1, r3
 8000aea:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2302      	movs	r3, #2
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <pwm_pixel_pause.10+0xc4>)
 8000af8:	f002 fc40 	bl	800337c <HAL_I2C_Master_Transmit>
    	for(uint8_t j = 0x3C; j< 0x43; j ++){
 8000afc:	233c      	movs	r3, #60	; 0x3c
 8000afe:	73bb      	strb	r3, [r7, #14]
 8000b00:	e013      	b.n	8000b2a <pwm_pixel_pause.10+0xb2>
			data[0] = j;
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			data[1] = 0x0A;
 8000b08:	230a      	movs	r3, #10
 8000b0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			HAL_I2C_Master_Transmit(&hi2c1, LEDMAT_ADD, data, 2, HAL_MAX_DELAY);
 8000b0e:	23ea      	movs	r3, #234	; 0xea
 8000b10:	b299      	uxth	r1, r3
 8000b12:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <pwm_pixel_pause.10+0xc4>)
 8000b20:	f002 fc2c 	bl	800337c <HAL_I2C_Master_Transmit>
    	for(uint8_t j = 0x3C; j< 0x43; j ++){
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	3301      	adds	r3, #1
 8000b28:	73bb      	strb	r3, [r7, #14]
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	2b42      	cmp	r3, #66	; 0x42
 8000b2e:	d9e8      	bls.n	8000b02 <pwm_pixel_pause.10+0x8a>
    }
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000012c 	.word	0x2000012c

08000b40 <display_end.11>:
	void display_end(){
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4664      	mov	r4, ip
 8000b48:	f8c7 c004 	str.w	ip, [r7, #4]
		addpixel(2, 0); addpixel(8, 0);
 8000b4c:	46a4      	mov	ip, r4
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff ff47 	bl	80009e4 <addpixel.4>
 8000b56:	46a4      	mov	ip, r4
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2008      	movs	r0, #8
 8000b5c:	f7ff ff42 	bl	80009e4 <addpixel.4>
		addpixel(3, 1); addpixel(7, 1);
 8000b60:	46a4      	mov	ip, r4
 8000b62:	2101      	movs	r1, #1
 8000b64:	2003      	movs	r0, #3
 8000b66:	f7ff ff3d 	bl	80009e4 <addpixel.4>
 8000b6a:	46a4      	mov	ip, r4
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f7ff ff38 	bl	80009e4 <addpixel.4>
		addpixel(4, 2); addpixel(6, 2);
 8000b74:	46a4      	mov	ip, r4
 8000b76:	2102      	movs	r1, #2
 8000b78:	2004      	movs	r0, #4
 8000b7a:	f7ff ff33 	bl	80009e4 <addpixel.4>
 8000b7e:	46a4      	mov	ip, r4
 8000b80:	2102      	movs	r1, #2
 8000b82:	2006      	movs	r0, #6
 8000b84:	f7ff ff2e 	bl	80009e4 <addpixel.4>
		addpixel(5, 3); addpixel(5, 3);
 8000b88:	46a4      	mov	ip, r4
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	2005      	movs	r0, #5
 8000b8e:	f7ff ff29 	bl	80009e4 <addpixel.4>
 8000b92:	46a4      	mov	ip, r4
 8000b94:	2103      	movs	r1, #3
 8000b96:	2005      	movs	r0, #5
 8000b98:	f7ff ff24 	bl	80009e4 <addpixel.4>
		addpixel(6, 4); addpixel(4, 4);
 8000b9c:	46a4      	mov	ip, r4
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	2006      	movs	r0, #6
 8000ba2:	f7ff ff1f 	bl	80009e4 <addpixel.4>
 8000ba6:	46a4      	mov	ip, r4
 8000ba8:	2104      	movs	r1, #4
 8000baa:	2004      	movs	r0, #4
 8000bac:	f7ff ff1a 	bl	80009e4 <addpixel.4>
		addpixel(7, 5); addpixel(3, 5);
 8000bb0:	46a4      	mov	ip, r4
 8000bb2:	2105      	movs	r1, #5
 8000bb4:	2007      	movs	r0, #7
 8000bb6:	f7ff ff15 	bl	80009e4 <addpixel.4>
 8000bba:	46a4      	mov	ip, r4
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f7ff ff10 	bl	80009e4 <addpixel.4>
		addpixel(8, 6); addpixel(2, 6);
 8000bc4:	46a4      	mov	ip, r4
 8000bc6:	2106      	movs	r1, #6
 8000bc8:	2008      	movs	r0, #8
 8000bca:	f7ff ff0b 	bl	80009e4 <addpixel.4>
 8000bce:	46a4      	mov	ip, r4
 8000bd0:	2106      	movs	r1, #6
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ff06 	bl	80009e4 <addpixel.4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <display_end.11+0xac>)
 8000bde:	f002 fa57 	bl	8003090 <HAL_GPIO_WritePin>
	}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020000 	.word	0x40020000

08000bf0 <display_snake.3>:
	void display_snake(){
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4664      	mov	r4, ip
 8000bf8:	f8c7 c004 	str.w	ip, [r7, #4]
		addpixel(snakeX[1], snakeY[1]);
 8000bfc:	6a23      	ldr	r3, [r4, #32]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	6922      	ldr	r2, [r4, #16]
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	46a4      	mov	ip, r4
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff feeb 	bl	80009e4 <addpixel.4>
		addpixel(snakeX[2], snakeY[2]);
 8000c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	6962      	ldr	r2, [r4, #20]
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	46a4      	mov	ip, r4
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fee2 	bl	80009e4 <addpixel.4>
		addpixel(snakeX[3], snakeY[3]);
 8000c20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	69a2      	ldr	r2, [r4, #24]
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	46a4      	mov	ip, r4
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fed9 	bl	80009e4 <addpixel.4>
		addpixel(fruit_x, fruit_y);
 8000c32:	68a3      	ldr	r3, [r4, #8]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	6862      	ldr	r2, [r4, #4]
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	46a4      	mov	ip, r4
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fed0 	bl	80009e4 <addpixel.4>
	}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}

08000c4c <display_pause.9>:
	void display_pause(){
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4664      	mov	r4, ip
 8000c54:	f8c7 c004 	str.w	ip, [r7, #4]
		addpixel(3, 0); addpixel(7, 0);
 8000c58:	46a4      	mov	ip, r4
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f7ff fec1 	bl	80009e4 <addpixel.4>
 8000c62:	46a4      	mov	ip, r4
 8000c64:	2100      	movs	r1, #0
 8000c66:	2007      	movs	r0, #7
 8000c68:	f7ff febc 	bl	80009e4 <addpixel.4>
		addpixel(3, 1); addpixel(7, 1);
 8000c6c:	46a4      	mov	ip, r4
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff feb7 	bl	80009e4 <addpixel.4>
 8000c76:	46a4      	mov	ip, r4
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f7ff feb2 	bl	80009e4 <addpixel.4>
		addpixel(3, 2); addpixel(7, 2);
 8000c80:	46a4      	mov	ip, r4
 8000c82:	2102      	movs	r1, #2
 8000c84:	2003      	movs	r0, #3
 8000c86:	f7ff fead 	bl	80009e4 <addpixel.4>
 8000c8a:	46a4      	mov	ip, r4
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	2007      	movs	r0, #7
 8000c90:	f7ff fea8 	bl	80009e4 <addpixel.4>
		addpixel(3, 3); addpixel(7, 3);
 8000c94:	46a4      	mov	ip, r4
 8000c96:	2103      	movs	r1, #3
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f7ff fea3 	bl	80009e4 <addpixel.4>
 8000c9e:	46a4      	mov	ip, r4
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f7ff fe9e 	bl	80009e4 <addpixel.4>
		addpixel(3, 4); addpixel(7, 4);
 8000ca8:	46a4      	mov	ip, r4
 8000caa:	2104      	movs	r1, #4
 8000cac:	2003      	movs	r0, #3
 8000cae:	f7ff fe99 	bl	80009e4 <addpixel.4>
 8000cb2:	46a4      	mov	ip, r4
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f7ff fe94 	bl	80009e4 <addpixel.4>
		addpixel(3, 5); addpixel(7, 5);
 8000cbc:	46a4      	mov	ip, r4
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f7ff fe8f 	bl	80009e4 <addpixel.4>
 8000cc6:	46a4      	mov	ip, r4
 8000cc8:	2105      	movs	r1, #5
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f7ff fe8a 	bl	80009e4 <addpixel.4>
		addpixel(3, 6); addpixel(7, 6);
 8000cd0:	46a4      	mov	ip, r4
 8000cd2:	2106      	movs	r1, #6
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f7ff fe85 	bl	80009e4 <addpixel.4>
 8000cda:	46a4      	mov	ip, r4
 8000cdc:	2106      	movs	r1, #6
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f7ff fe80 	bl	80009e4 <addpixel.4>
		pwm_pixel_pause();
 8000ce4:	46a4      	mov	ip, r4
 8000ce6:	f7ff fec7 	bl	8000a78 <pwm_pixel_pause.10>
	}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd90      	pop	{r4, r7, pc}

08000cf2 <change_coordinate.8>:
	void change_coordinate(int x_pos[4], int y_pos[4], int new_x_point, int new_y_point){
 8000cf2:	b480      	push	{r7}
 8000cf4:	b089      	sub	sp, #36	; 0x24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6178      	str	r0, [r7, #20]
 8000cfa:	6139      	str	r1, [r7, #16]
 8000cfc:	60fa      	str	r2, [r7, #12]
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	f8c7 c004 	str.w	ip, [r7, #4]
	    for (int i = 0; i < 3; i++) {
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	e018      	b.n	8000d3c <change_coordinate.8+0x4a>
	        x_pos[i] = x_pos[i + 1];
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	441a      	add	r2, r3
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	6979      	ldr	r1, [r7, #20]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	601a      	str	r2, [r3, #0]
	        y_pos[i] = y_pos[i + 1];
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3301      	adds	r3, #1
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	441a      	add	r2, r3
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	6939      	ldr	r1, [r7, #16]
 8000d30:	440b      	add	r3, r1
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	601a      	str	r2, [r3, #0]
	    for (int i = 0; i < 3; i++) {
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	dde3      	ble.n	8000d0a <change_coordinate.8+0x18>
	    x_pos[3] = new_x_point;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	330c      	adds	r3, #12
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	601a      	str	r2, [r3, #0]
	    y_pos[3] = new_y_point;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	330c      	adds	r3, #12
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	601a      	str	r2, [r3, #0]
	}
 8000d52:	bf00      	nop
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <move_direction.5>:
	int move_direction(int dir){
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	4663      	mov	r3, ip
 8000d6a:	f8c7 c000 	str.w	ip, [r7]
		if((Xaxis < 500) & (new_head_x > 0) & (dir != 2)){
 8000d6e:	4a43      	ldr	r2, [pc, #268]	; (8000e7c <move_direction.5+0x11c>)
 8000d70:	8812      	ldrh	r2, [r2, #0]
 8000d72:	f240 11f3 	movw	r1, #499	; 0x1f3
 8000d76:	428a      	cmp	r2, r1
 8000d78:	bf94      	ite	ls
 8000d7a:	2201      	movls	r2, #1
 8000d7c:	2200      	movhi	r2, #0
 8000d7e:	b2d1      	uxtb	r1, r2
 8000d80:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	bf14      	ite	ne
 8000d88:	2201      	movne	r2, #1
 8000d8a:	2200      	moveq	r2, #0
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	400a      	ands	r2, r1
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	4611      	mov	r1, r2
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	2a02      	cmp	r2, #2
 8000d98:	bf14      	ite	ne
 8000d9a:	2201      	movne	r2, #1
 8000d9c:	2200      	moveq	r2, #0
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	400a      	ands	r2, r1
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d001      	beq.n	8000daa <move_direction.5+0x4a>
		  return 1; // Left
 8000da6:	2301      	movs	r3, #1
 8000da8:	e062      	b.n	8000e70 <move_direction.5+0x110>
		else if ((Xaxis > 3500) & (new_head_x < r_size - 1) & (dir != 1)){
 8000daa:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <move_direction.5+0x11c>)
 8000dac:	8812      	ldrh	r2, [r2, #0]
 8000dae:	f640 51ac 	movw	r1, #3500	; 0xdac
 8000db2:	428a      	cmp	r2, r1
 8000db4:	bf8c      	ite	hi
 8000db6:	2201      	movhi	r2, #1
 8000db8:	2200      	movls	r2, #0
 8000dba:	b2d1      	uxtb	r1, r2
 8000dbc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	4290      	cmp	r0, r2
 8000dca:	bfb4      	ite	lt
 8000dcc:	2201      	movlt	r2, #1
 8000dce:	2200      	movge	r2, #0
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	2a01      	cmp	r2, #1
 8000ddc:	bf14      	ite	ne
 8000dde:	2201      	movne	r2, #1
 8000de0:	2200      	moveq	r2, #0
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	400a      	ands	r2, r1
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d001      	beq.n	8000dee <move_direction.5+0x8e>
		  return 2; // right
 8000dea:	2302      	movs	r3, #2
 8000dec:	e040      	b.n	8000e70 <move_direction.5+0x110>
		else if ((Yaxis < 500) & (new_head_y < c_size - 1) & (dir != 4)){
 8000dee:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <move_direction.5+0x120>)
 8000df0:	8812      	ldrh	r2, [r2, #0]
 8000df2:	f240 11f3 	movw	r1, #499	; 0x1f3
 8000df6:	428a      	cmp	r2, r1
 8000df8:	bf94      	ite	ls
 8000dfa:	2201      	movls	r2, #1
 8000dfc:	2200      	movhi	r2, #0
 8000dfe:	b2d1      	uxtb	r1, r2
 8000e00:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000e04:	4610      	mov	r0, r2
 8000e06:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	bfb4      	ite	lt
 8000e10:	2201      	movlt	r2, #1
 8000e12:	2200      	movge	r2, #0
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	400a      	ands	r2, r1
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	2a04      	cmp	r2, #4
 8000e20:	bf14      	ite	ne
 8000e22:	2201      	movne	r2, #1
 8000e24:	2200      	moveq	r2, #0
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	400a      	ands	r2, r1
 8000e2a:	2a00      	cmp	r2, #0
 8000e2c:	d001      	beq.n	8000e32 <move_direction.5+0xd2>
		  return 3; // up
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e01e      	b.n	8000e70 <move_direction.5+0x110>
		else if ((Yaxis > 3500) & (new_head_y > 0) & (dir != 3)){
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <move_direction.5+0x120>)
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	f640 51ac 	movw	r1, #3500	; 0xdac
 8000e3a:	428a      	cmp	r2, r1
 8000e3c:	bf8c      	ite	hi
 8000e3e:	2201      	movhi	r2, #1
 8000e40:	2200      	movls	r2, #0
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4013      	ands	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	bf14      	ite	ne
 8000e5e:	2301      	movne	r3, #1
 8000e60:	2300      	moveq	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <move_direction.5+0x10e>
		  return 4; //down
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e000      	b.n	8000e70 <move_direction.5+0x110>
			return dir;
 8000e6e:	687b      	ldr	r3, [r7, #4]
	}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	2000020c 	.word	0x2000020c
 8000e80:	2000020e 	.word	0x2000020e

08000e84 <new_x_coordinates.6>:
	int new_x_coordinates(int new_head_x){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	4663      	mov	r3, ip
 8000e8e:	f8c7 c000 	str.w	ip, [r7]
		if((direction == 1)  & (new_head_x > 0)){
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2a01      	cmp	r2, #1
 8000e96:	bf0c      	ite	eq
 8000e98:	2201      	moveq	r2, #1
 8000e9a:	2200      	movne	r2, #0
 8000e9c:	b2d1      	uxtb	r1, r2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	bfcc      	ite	gt
 8000ea4:	2201      	movgt	r2, #1
 8000ea6:	2200      	movle	r2, #0
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	400a      	ands	r2, r1
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d002      	beq.n	8000eb8 <new_x_coordinates.6+0x34>
			return new_head_x - 1;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	e016      	b.n	8000ee6 <new_x_coordinates.6+0x62>
		else if((direction == 2) & (new_head_x < r_size - 1)){
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	2a02      	cmp	r2, #2
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2201      	moveq	r2, #1
 8000ec0:	2200      	movne	r2, #0
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	bfb4      	ite	lt
 8000ed0:	2301      	movlt	r3, #1
 8000ed2:	2300      	movge	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <new_x_coordinates.6+0x60>
			return new_head_x + 1;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <new_x_coordinates.6+0x62>
			return new_head_x;
 8000ee4:	687b      	ldr	r3, [r7, #4]
	}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <new_y_coordinates.7>:
	int new_y_coordinates(int new_head_y){
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	4663      	mov	r3, ip
 8000efc:	f8c7 c000 	str.w	ip, [r7]
		if((direction == 3) & (new_head_y < c_size - 1)){
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	2a03      	cmp	r2, #3
 8000f04:	bf0c      	ite	eq
 8000f06:	2201      	moveq	r2, #1
 8000f08:	2200      	movne	r2, #0
 8000f0a:	b2d1      	uxtb	r1, r2
 8000f0c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000f10:	3a01      	subs	r2, #1
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	4290      	cmp	r0, r2
 8000f16:	bfb4      	ite	lt
 8000f18:	2201      	movlt	r2, #1
 8000f1a:	2200      	movge	r2, #0
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	400a      	ands	r2, r1
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d002      	beq.n	8000f2c <new_y_coordinates.7+0x3a>
			return new_head_y + 1;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	e013      	b.n	8000f54 <new_y_coordinates.7+0x62>
		else if((direction == 4) & (new_head_y > 0)){
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bfcc      	ite	gt
 8000f3e:	2301      	movgt	r3, #1
 8000f40:	2300      	movle	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <new_y_coordinates.7+0x60>
			return new_head_y - 1;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	e000      	b.n	8000f54 <new_y_coordinates.7+0x62>
			return new_head_y;
 8000f52:	687b      	ldr	r3, [r7, #4]
	}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <check_keep_playing.0>:
	int check_keep_playing(){
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4663      	mov	r3, ip
 8000f68:	f8c7 c004 	str.w	ip, [r7, #4]
		if((snakeX[3] == snakeX[2]) && (snakeY[3] == snakeY[2])){
 8000f6c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f70:	4291      	cmp	r1, r2
 8000f72:	d105      	bne.n	8000f80 <check_keep_playing.0+0x20>
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d101      	bne.n	8000f80 <check_keep_playing.0+0x20>
			return 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <check_keep_playing.0+0x22>
			return 1;
 8000f80:	2301      	movs	r3, #1
	}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	; 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fbe2 	bl	8005768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <SystemClock_Config+0xd0>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a28      	ldr	r2, [pc, #160]	; (8001060 <SystemClock_Config+0xd0>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <SystemClock_Config+0xd0>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <SystemClock_Config+0xd4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fdc:	4a21      	ldr	r2, [pc, #132]	; (8001064 <SystemClock_Config+0xd4>)
 8000fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <SystemClock_Config+0xd4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001004:	2310      	movs	r3, #16
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001008:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800100c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800100e:	2304      	movs	r3, #4
 8001010:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001012:	2307      	movs	r3, #7
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fde4 	bl	8003be8 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001026:	f000 f9cb 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2302      	movs	r3, #2
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2102      	movs	r1, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f003 f846 	bl	80040d8 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001052:	f000 f9b5 	bl	80013c0 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_ADC1_Init+0xb4>)
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <MX_ADC1_Init+0xb8>)
 800107e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_ADC1_Init+0xb4>)
 8001082:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001086:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_ADC1_Init+0xb4>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_ADC1_Init+0xb4>)
 8001090:	2201      	movs	r2, #1
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_ADC1_Init+0xb4>)
 8001096:	2201      	movs	r2, #1
 8001098:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_ADC1_Init+0xb4>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_ADC1_Init+0xb4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_ADC1_Init+0xb4>)
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <MX_ADC1_Init+0xbc>)
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_ADC1_Init+0xb4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_ADC1_Init+0xb4>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_ADC1_Init+0xb4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_ADC1_Init+0xb4>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <MX_ADC1_Init+0xb4>)
 80010ca:	f000 fcc5 	bl	8001a58 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010d4:	f000 f974 	bl	80013c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010e0:	2307      	movs	r3, #7
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_ADC1_Init+0xb4>)
 80010ea:	f000 ff21 	bl	8001f30 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010f4:	f000 f964 	bl	80013c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_ADC1_Init+0xb4>)
 8001106:	f000 ff13 	bl	8001f30 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001110:	f000 f956 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000084 	.word	0x20000084
 8001120:	40012000 	.word	0x40012000
 8001124:	0f000001 	.word	0x0f000001

08001128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C1_Init+0x50>)
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <MX_I2C1_Init+0x54>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C1_Init+0x50>)
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_I2C1_Init+0x58>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_I2C1_Init+0x50>)
 8001146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_I2C1_Init+0x50>)
 8001166:	f001 ffc5 	bl	80030f4 <HAL_I2C_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001170:	f000 f926 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000012c 	.word	0x2000012c
 800117c:	40005400 	.word	0x40005400
 8001180:	000186a0 	.word	0x000186a0

08001184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM2_Init+0x94>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_TIM2_Init+0x94>)
 80011aa:	220a      	movs	r2, #10
 80011ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM2_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000-1;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_TIM2_Init+0x94>)
 80011b6:	4a19      	ldr	r2, [pc, #100]	; (800121c <MX_TIM2_Init+0x98>)
 80011b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_TIM2_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_TIM2_Init+0x94>)
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_TIM2_Init+0x94>)
 80011c8:	f003 f9a6 	bl	8004518 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80011d2:	f000 f8f5 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_TIM2_Init+0x94>)
 80011e4:	f003 fb52 	bl	800488c <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f000 f8e7 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011f2:	2320      	movs	r3, #32
 80011f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM2_Init+0x94>)
 8001200:	f003 fd4e 	bl	8004ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800120a:	f000 f8d9 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000180 	.word	0x20000180
 800121c:	0001481f 	.word	0x0001481f

08001220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART2_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001258:	f003 fda4 	bl	8004da4 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f000 f8ad 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001c8 	.word	0x200001c8
 8001270:	40004400 	.word	0x40004400

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <MX_DMA_Init+0x3c>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_DMA_Init+0x3c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2038      	movs	r0, #56	; 0x38
 800129c:	f001 f9cd 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a0:	2038      	movs	r0, #56	; 0x38
 80012a2:	f001 f9e6 	bl	8002672 <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_GPIO_Init+0xfc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_GPIO_Init+0xfc>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_GPIO_Init+0xfc>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <MX_GPIO_Init+0x100>)
 8001340:	f001 fea6 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_GPIO_Init+0x104>)
 800135c:	f001 fd14 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480f      	ldr	r0, [pc, #60]	; (80013b4 <MX_GPIO_Init+0x100>)
 8001378:	f001 fd06 	bl	8002d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : analog_button_Pin */
  GPIO_InitStruct.Pin = analog_button_Pin;
 800137c:	2340      	movs	r3, #64	; 0x40
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001380:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(analog_button_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	480a      	ldr	r0, [pc, #40]	; (80013bc <MX_GPIO_Init+0x108>)
 8001392:	f001 fcf9 	bl	8002d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2101      	movs	r1, #1
 800139a:	2017      	movs	r0, #23
 800139c:	f001 f94d 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013a0:	2017      	movs	r0, #23
 80013a2:	f001 f966 	bl	8002672 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020400 	.word	0x40020400

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a33      	ldr	r2, [pc, #204]	; (8001508 <HAL_ADC_MspInit+0xec>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d15f      	bne.n	80014fe <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_ADC_MspInit+0xf0>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_ADC_MspInit+0xf0>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_ADC_MspInit+0xf0>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_ADC_MspInit+0xf0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a2a      	ldr	r2, [pc, #168]	; (800150c <HAL_ADC_MspInit+0xf0>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_ADC_MspInit+0xf0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001476:	2303      	movs	r3, #3
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147a:	2303      	movs	r3, #3
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4821      	ldr	r0, [pc, #132]	; (8001510 <HAL_ADC_MspInit+0xf4>)
 800148a:	f001 fc7d 	bl	8002d88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 8001490:	4a21      	ldr	r2, [pc, #132]	; (8001518 <HAL_ADC_MspInit+0xfc>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d2:	4810      	ldr	r0, [pc, #64]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014d4:	f001 f8e8 	bl	80026a8 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80014de:	f7ff ff6f 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_ADC_MspInit+0xf8>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2101      	movs	r1, #1
 80014f2:	2012      	movs	r0, #18
 80014f4:	f001 f8a1 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014f8:	2012      	movs	r0, #18
 80014fa:	f001 f8ba 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40012000 	.word	0x40012000
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000
 8001514:	200000cc 	.word	0x200000cc
 8001518:	40026410 	.word	0x40026410

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_I2C_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12c      	bne.n	8001598 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156c:	2304      	movs	r3, #4
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <HAL_I2C_MspInit+0x8c>)
 8001578:	f001 fc06 	bl	8002d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400

080015ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015bc:	d115      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_TIM_Base_MspInit+0x48>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_TIM_Base_MspInit+0x48>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_TIM_Base_MspInit+0x48>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201c      	movs	r0, #28
 80015e0:	f001 f82b 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e4:	201c      	movs	r0, #28
 80015e6:	f001 f844 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_UART_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12b      	bne.n	8001672 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001652:	230c      	movs	r3, #12
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_UART_MspInit+0x8c>)
 800166e:	f001 fb8b 	bl	8002d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004400 	.word	0x40004400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f97c 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <ADC_IRQHandler+0x10>)
 80016e2:	f000 f9fc 	bl	8001ade <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000084 	.word	0x20000084

080016f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(analog_button_Pin);
 80016f4:	2040      	movs	r0, #64	; 0x40
 80016f6:	f001 fce5 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM2_IRQHandler+0x10>)
 8001706:	f002 ffb9 	bl	800467c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000180 	.word	0x20000180

08001714 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA2_Stream0_IRQHandler+0x10>)
 800171a:	f001 f8cb 	bl	80028b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200000cc 	.word	0x200000cc

08001728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_kill>:

int _kill(int pid, int sig)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001742:	f004 f819 	bl	8005778 <__errno>
 8001746:	4603      	mov	r3, r0
 8001748:	2216      	movs	r2, #22
 800174a:	601a      	str	r2, [r3, #0]
  return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_exit>:

void _exit (int status)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ffe7 	bl	8001738 <_kill>
  while (1) {}    /* Make sure we hang here */
 800176a:	e7fe      	b.n	800176a <_exit+0x12>

0800176c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e00a      	b.n	8001794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800177e:	f3af 8000 	nop.w
 8001782:	4601      	mov	r1, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbf0      	blt.n	800177e <_read+0x12>
  }

  return len;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e009      	b.n	80017cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf1      	blt.n	80017b8 <_write+0x12>
  }
  return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_close>:

int _close(int file)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001806:	605a      	str	r2, [r3, #4]
  return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_isatty>:

int _isatty(int file)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f003 ff7e 	bl	8005778 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20018000 	.word	0x20018000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	20000220 	.word	0x20000220
 80018b0:	20000378 	.word	0x20000378

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd7 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f003 ff3d 	bl	8005784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7fe fef3 	bl	80006f4 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001910:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800191c:	08006a08 	.word	0x08006a08
  ldr r2, =_sbss
 8001920:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001924:	20000374 	.word	0x20000374

08001928 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <DMA1_Stream0_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fe65 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fd34 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fe7d 	bl	800268e <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ac:	f000 fe45 	bl	800263a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000224 	.word	0x20000224

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000224 	.word	0x20000224

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e033      	b.n	8001ad6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fcd0 	bl	800141c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9e:	f023 0302 	bic.w	r3, r3, #2
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fb62 	bl	8002174 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac6:	e001      	b.n	8001acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d049      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0xca>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d046      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d12b      	bne.n	8001b98 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d127      	bne.n	8001b98 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d119      	bne.n	8001b98 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0220 	bic.w	r2, r2, #32
 8001b72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f9a1 	bl	8001ee0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f06f 0212 	mvn.w	r2, #18
 8001ba6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d057      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x190>
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d054      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d139      	bne.n	8001c5e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d12b      	bne.n	8001c5e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d124      	bne.n	8001c5e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11d      	bne.n	8001c5e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d119      	bne.n	8001c5e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fc06 	bl	8002470 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 020c 	mvn.w	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d017      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x1d6>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d014      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10d      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f92f 	bl	8001f08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f06f 0201 	mvn.w	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d015      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x218>
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f043 0202 	orr.w	r2, r3, #2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0220 	mvn.w	r2, #32
 8001ce4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f918 	bl	8001f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0220 	mvn.w	r2, #32
 8001cf4:	601a      	str	r2, [r3, #0]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Start_DMA+0x1e>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e0ce      	b.n	8001ebc <HAL_ADC_Start_DMA+0x1bc>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d018      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d44:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_ADC_Start_DMA+0x1c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a5f      	ldr	r2, [pc, #380]	; (8001ec8 <HAL_ADC_Start_DMA+0x1c8>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9a      	lsrs	r2, r3, #18
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d74:	d107      	bne.n	8001d86 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f040 8086 	bne.w	8001ea2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f023 0206 	bic.w	r2, r3, #6
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
 8001de2:	e002      	b.n	8001dea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_ADC_Start_DMA+0x1cc>)
 8001df4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_ADC_Start_DMA+0x1d0>)
 8001dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_ADC_Start_DMA+0x1d4>)
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	4a33      	ldr	r2, [pc, #204]	; (8001ed8 <HAL_ADC_Start_DMA+0x1d8>)
 8001e0c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e26:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e36:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	334c      	adds	r3, #76	; 0x4c
 8001e42:	4619      	mov	r1, r3
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f000 fcdc 	bl	8002804 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10f      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d129      	bne.n	8001eba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	e020      	b.n	8001eba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_ADC_Start_DMA+0x1dc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d11b      	bne.n	8001eba <HAL_ADC_Start_DMA+0x1ba>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d114      	bne.n	8001eba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	e00b      	b.n	8001eba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0210 	orr.w	r2, r3, #16
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	431bde83 	.word	0x431bde83
 8001ecc:	40012300 	.word	0x40012300
 8001ed0:	0800236d 	.word	0x0800236d
 8001ed4:	08002427 	.word	0x08002427
 8001ed8:	08002443 	.word	0x08002443
 8001edc:	40012000 	.word	0x40012000

08001ee0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1c>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e105      	b.n	8002158 <HAL_ADC_ConfigChannel+0x228>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d925      	bls.n	8001fa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68d9      	ldr	r1, [r3, #12]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b1e      	subs	r3, #30
 8001f72:	2207      	movs	r2, #7
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4403      	add	r3, r0
 8001f9a:	3b1e      	subs	r3, #30
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	e022      	b.n	8001fee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4403      	add	r3, r0
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d824      	bhi.n	8002040 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b05      	subs	r3, #5
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3b05      	subs	r3, #5
 8002032:	fa00 f203 	lsl.w	r2, r0, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
 800203e:	e04c      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d824      	bhi.n	8002092 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b23      	subs	r3, #35	; 0x23
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43da      	mvns	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b23      	subs	r3, #35	; 0x23
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
 8002090:	e023      	b.n	80020da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b41      	subs	r3, #65	; 0x41
 80020a4:	221f      	movs	r2, #31
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b41      	subs	r3, #65	; 0x41
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_ADC_ConfigChannel+0x234>)
 80020dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_ADC_ConfigChannel+0x238>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1cc>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_ADC_ConfigChannel+0x238>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d123      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b10      	cmp	r3, #16
 800210c:	d003      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x1e6>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b11      	cmp	r3, #17
 8002114:	d11b      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d111      	bne.n	800214e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_ADC_ConfigChannel+0x23c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_ADC_ConfigChannel+0x240>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0c9a      	lsrs	r2, r3, #18
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002140:	e002      	b.n	8002148 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3b01      	subs	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40012300 	.word	0x40012300
 8002168:	40012000 	.word	0x40012000
 800216c:	20000000 	.word	0x20000000
 8002170:	431bde83 	.word	0x431bde83

08002174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <ADC_Init+0x1f0>)
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	4a58      	ldr	r2, [pc, #352]	; (8002368 <ADC_Init+0x1f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e00f      	b.n	8002272 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002270:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0202 	bic.w	r2, r2, #2
 8002280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	005a      	lsls	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	3b01      	subs	r3, #1
 80022cc:	035a      	lsls	r2, r3, #13
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	e007      	b.n	80022e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	3b01      	subs	r3, #1
 8002304:	051a      	lsls	r2, r3, #20
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800231c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232a:	025a      	lsls	r2, r3, #9
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	029a      	lsls	r2, r3, #10
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40012300 	.word	0x40012300
 8002368:	0f000001 	.word	0x0f000001

0800236c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	d13c      	bne.n	8002400 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d12b      	bne.n	80023f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d127      	bne.n	80023f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d119      	bne.n	80023f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0220 	bic.w	r2, r2, #32
 80023d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff fd71 	bl	8001ee0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023fe:	e00e      	b.n	800241e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff fd85 	bl	8001f1c <HAL_ADC_ErrorCallback>
}
 8002412:	e004      	b.n	800241e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff fd5d 	bl	8001ef4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f043 0204 	orr.w	r2, r3, #4
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7ff fd5a 	bl	8001f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	210f      	movs	r1, #15
 8002600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002604:	f7ff ff8e 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff29 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff3e 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff8e 	bl	8002578 <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5d 	bl	8002524 <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff31 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffa2 	bl	80025e0 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff f9a0 	bl	80019f8 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e099      	b.n	80027f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e4:	e00f      	b.n	8002706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e6:	f7ff f987 	bl	80019f8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d908      	bls.n	8002706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2203      	movs	r2, #3
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e078      	b.n	80027f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e8      	bne.n	80026e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_DMA_Init+0x158>)
 8002720:	4013      	ands	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b04      	cmp	r3, #4
 800275e:	d107      	bne.n	8002770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4313      	orrs	r3, r2
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f023 0307 	bic.w	r3, r3, #7
 8002786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2b04      	cmp	r3, #4
 8002798:	d117      	bne.n	80027ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00e      	beq.n	80027ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa6f 	bl	8002c90 <DMA_CheckFifoParam>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027c6:	2301      	movs	r3, #1
 80027c8:	e016      	b.n	80027f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa26 	bl	8002c24 <DMA_CalcBaseAndBitshift>
 80027d8:	4603      	mov	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	223f      	movs	r2, #63	; 0x3f
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	f010803f 	.word	0xf010803f

08002804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_DMA_Start_IT+0x26>
 8002826:	2302      	movs	r3, #2
 8002828:	e040      	b.n	80028ac <HAL_DMA_Start_IT+0xa8>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d12f      	bne.n	800289e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2202      	movs	r2, #2
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f9b8 	bl	8002bc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	223f      	movs	r2, #63	; 0x3f
 800285e:	409a      	lsls	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0216 	orr.w	r2, r2, #22
 8002872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0208 	orr.w	r2, r2, #8
 800288a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e005      	b.n	80028aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
 80028a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028c0:	4b8e      	ldr	r3, [pc, #568]	; (8002afc <HAL_DMA_IRQHandler+0x248>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a8e      	ldr	r2, [pc, #568]	; (8002b00 <HAL_DMA_IRQHandler+0x24c>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0a9b      	lsrs	r3, r3, #10
 80028cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	2208      	movs	r2, #8
 80028e0:	409a      	lsls	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01a      	beq.n	8002920 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	2208      	movs	r2, #8
 800290e:	409a      	lsls	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2201      	movs	r2, #1
 8002926:	409a      	lsls	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2201      	movs	r2, #1
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f043 0202 	orr.w	r2, r3, #2
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2204      	movs	r2, #4
 800295c:	409a      	lsls	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d012      	beq.n	800298c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	2204      	movs	r2, #4
 800297a:	409a      	lsls	r2, r3
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f043 0204 	orr.w	r2, r3, #4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2210      	movs	r2, #16
 8002992:	409a      	lsls	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d043      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d03c      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	2210      	movs	r2, #16
 80029b0:	409a      	lsls	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d018      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d024      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
 80029e2:	e01f      	b.n	8002a24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
 80029f4:	e016      	b.n	8002a24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0208 	bic.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2220      	movs	r2, #32
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 808f 	beq.w	8002b54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8087 	beq.w	8002b54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d136      	bne.n	8002acc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0216 	bic.w	r2, r2, #22
 8002a6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <HAL_DMA_IRQHandler+0x1da>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0208 	bic.w	r2, r2, #8
 8002a9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	223f      	movs	r2, #63	; 0x3f
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d07e      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
        }
        return;
 8002aca:	e079      	b.n	8002bc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01d      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10d      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d031      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
 8002af8:	e02c      	b.n	8002b54 <HAL_DMA_IRQHandler+0x2a0>
 8002afa:	bf00      	nop
 8002afc:	20000000 	.word	0x20000000
 8002b00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
 8002b14:	e01e      	b.n	8002b54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10f      	bne.n	8002b44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0210 	bic.w	r2, r2, #16
 8002b32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d032      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2205      	movs	r2, #5
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	3301      	adds	r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d307      	bcc.n	8002b9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f2      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x2cc>
 8002b9a:	e000      	b.n	8002b9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
 8002bbe:	e000      	b.n	8002bc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bc0:	bf00      	nop
    }
  }
}
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002be4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d108      	bne.n	8002c08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c06:	e007      	b.n	8002c18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3b10      	subs	r3, #16
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <DMA_CalcBaseAndBitshift+0x64>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <DMA_CalcBaseAndBitshift+0x68>)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d909      	bls.n	8002c66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	1d1a      	adds	r2, r3, #4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	; 0x58
 8002c64:	e007      	b.n	8002c76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	aaaaaaab 	.word	0xaaaaaaab
 8002c8c:	08006910 	.word	0x08006910

08002c90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d11f      	bne.n	8002cea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d856      	bhi.n	8002d5e <DMA_CheckFifoParam+0xce>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <DMA_CheckFifoParam+0x28>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002cdb 	.word	0x08002cdb
 8002cc0:	08002cc9 	.word	0x08002cc9
 8002cc4:	08002d5f 	.word	0x08002d5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d046      	beq.n	8002d62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd8:	e043      	b.n	8002d62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce2:	d140      	bne.n	8002d66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce8:	e03d      	b.n	8002d66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf2:	d121      	bne.n	8002d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d837      	bhi.n	8002d6a <DMA_CheckFifoParam+0xda>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <DMA_CheckFifoParam+0x70>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d17 	.word	0x08002d17
 8002d08:	08002d11 	.word	0x08002d11
 8002d0c:	08002d29 	.word	0x08002d29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      break;
 8002d14:	e030      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d025      	beq.n	8002d6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d26:	e022      	b.n	8002d6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d30:	d11f      	bne.n	8002d72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d36:	e01c      	b.n	8002d72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d903      	bls.n	8002d46 <DMA_CheckFifoParam+0xb6>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d003      	beq.n	8002d4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d44:	e018      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4a:	e015      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e00b      	b.n	8002d76 <DMA_CheckFifoParam+0xe6>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e00a      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e008      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d66:	bf00      	nop
 8002d68:	e006      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e004      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d76:	bf00      	nop
    }
  } 
  
  return status; 
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop

08002d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e159      	b.n	8003058 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002da4:	2201      	movs	r2, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	f040 8148 	bne.w	8003052 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d005      	beq.n	8002dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d130      	bne.n	8002e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	2203      	movs	r2, #3
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 0201 	and.w	r2, r3, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d017      	beq.n	8002e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d123      	bne.n	8002ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	08da      	lsrs	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3208      	adds	r2, #8
 8002e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	08da      	lsrs	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3208      	adds	r2, #8
 8002ec6:	69b9      	ldr	r1, [r7, #24]
 8002ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0203 	and.w	r2, r3, #3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a2 	beq.w	8003052 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <HAL_GPIO_Init+0x2e8>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	4a56      	ldr	r2, [pc, #344]	; (8003070 <HAL_GPIO_Init+0x2e8>)
 8002f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1e:	4b54      	ldr	r3, [pc, #336]	; (8003070 <HAL_GPIO_Init+0x2e8>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f2a:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_GPIO_Init+0x2ec>)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	3302      	adds	r3, #2
 8002f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a49      	ldr	r2, [pc, #292]	; (8003078 <HAL_GPIO_Init+0x2f0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d019      	beq.n	8002f8a <HAL_GPIO_Init+0x202>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a48      	ldr	r2, [pc, #288]	; (800307c <HAL_GPIO_Init+0x2f4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0x1fe>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_GPIO_Init+0x2f8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00d      	beq.n	8002f82 <HAL_GPIO_Init+0x1fa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a46      	ldr	r2, [pc, #280]	; (8003084 <HAL_GPIO_Init+0x2fc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <HAL_GPIO_Init+0x1f6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a45      	ldr	r2, [pc, #276]	; (8003088 <HAL_GPIO_Init+0x300>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_GPIO_Init+0x1f2>
 8002f76:	2304      	movs	r3, #4
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x204>
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x204>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x204>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x204>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x204>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9c:	4935      	ldr	r1, [pc, #212]	; (8003074 <HAL_GPIO_Init+0x2ec>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002faa:	4b38      	ldr	r3, [pc, #224]	; (800308c <HAL_GPIO_Init+0x304>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fce:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_GPIO_Init+0x304>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd4:	4b2d      	ldr	r3, [pc, #180]	; (800308c <HAL_GPIO_Init+0x304>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_GPIO_Init+0x304>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <HAL_GPIO_Init+0x304>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003022:	4a1a      	ldr	r2, [pc, #104]	; (800308c <HAL_GPIO_Init+0x304>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_GPIO_Init+0x304>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800304c:	4a0f      	ldr	r2, [pc, #60]	; (800308c <HAL_GPIO_Init+0x304>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3301      	adds	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	f67f aea2 	bls.w	8002da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40013c00 	.word	0x40013c00

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030ac:	e003      	b.n	80030b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030da:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd fa78 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40013c00 	.word	0x40013c00

080030f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e12b      	b.n	800335e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe f9fe 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003158:	f001 f9b6 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 800315c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a81      	ldr	r2, [pc, #516]	; (8003368 <HAL_I2C_Init+0x274>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d807      	bhi.n	8003178 <HAL_I2C_Init+0x84>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a80      	ldr	r2, [pc, #512]	; (800336c <HAL_I2C_Init+0x278>)
 800316c:	4293      	cmp	r3, r2
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e006      	b.n	8003186 <HAL_I2C_Init+0x92>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a7d      	ldr	r2, [pc, #500]	; (8003370 <HAL_I2C_Init+0x27c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0e7      	b.n	800335e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a78      	ldr	r2, [pc, #480]	; (8003374 <HAL_I2C_Init+0x280>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0c9b      	lsrs	r3, r3, #18
 8003198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a6a      	ldr	r2, [pc, #424]	; (8003368 <HAL_I2C_Init+0x274>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d802      	bhi.n	80031c8 <HAL_I2C_Init+0xd4>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	e009      	b.n	80031dc <HAL_I2C_Init+0xe8>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <HAL_I2C_Init+0x284>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	3301      	adds	r3, #1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	495c      	ldr	r1, [pc, #368]	; (8003368 <HAL_I2C_Init+0x274>)
 80031f8:	428b      	cmp	r3, r1
 80031fa:	d819      	bhi.n	8003230 <HAL_I2C_Init+0x13c>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e59      	subs	r1, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb1 f3f3 	udiv	r3, r1, r3
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003210:	400b      	ands	r3, r1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_I2C_Init+0x138>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e59      	subs	r1, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fbb1 f3f3 	udiv	r3, r1, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	e051      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800322c:	2304      	movs	r3, #4
 800322e:	e04f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <HAL_I2C_Init+0x168>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e012      	b.n	8003282 <HAL_I2C_Init+0x18e>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e58      	subs	r0, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	0099      	lsls	r1, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x196>
 8003286:	2301      	movs	r3, #1
 8003288:	e022      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10e      	bne.n	80032b0 <HAL_I2C_Init+0x1bc>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e58      	subs	r0, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	6809      	ldr	r1, [r1, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6911      	ldr	r1, [r2, #16]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68d2      	ldr	r2, [r2, #12]
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	430b      	orrs	r3, r1
 8003312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	000186a0 	.word	0x000186a0
 800336c:	001e847f 	.word	0x001e847f
 8003370:	003d08ff 	.word	0x003d08ff
 8003374:	431bde83 	.word	0x431bde83
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	461a      	mov	r2, r3
 8003388:	460b      	mov	r3, r1
 800338a:	817b      	strh	r3, [r7, #10]
 800338c:	4613      	mov	r3, r2
 800338e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7fe fb32 	bl	80019f8 <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b20      	cmp	r3, #32
 80033a0:	f040 80e0 	bne.w	8003564 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2319      	movs	r3, #25
 80033aa:	2201      	movs	r2, #1
 80033ac:	4970      	ldr	r1, [pc, #448]	; (8003570 <HAL_I2C_Master_Transmit+0x1f4>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa92 	bl	80038d8 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0d3      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_I2C_Master_Transmit+0x50>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0cc      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d007      	beq.n	80033f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003400:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2221      	movs	r2, #33	; 0x21
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2210      	movs	r2, #16
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	893a      	ldrh	r2, [r7, #8]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a50      	ldr	r2, [pc, #320]	; (8003574 <HAL_I2C_Master_Transmit+0x1f8>)
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003434:	8979      	ldrh	r1, [r7, #10]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f9ca 	bl	80037d4 <I2C_MasterRequestWrite>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e08d      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003460:	e066      	b.n	8003530 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fb0c 	bl	8003a84 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06b      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d11b      	bne.n	8003504 <HAL_I2C_Master_Transmit+0x188>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	6a39      	ldr	r1, [r7, #32]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fafc 	bl	8003b06 <I2C_WaitOnBTFFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	2b04      	cmp	r3, #4
 800351a:	d107      	bne.n	800352c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e01a      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d194      	bne.n	8003462 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	00100002 	.word	0x00100002
 8003574:	ffff0000 	.word	0xffff0000

08003578 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	460b      	mov	r3, r1
 8003586:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003588:	f7fe fa36 	bl	80019f8 <HAL_GetTick>
 800358c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	f040 8111 	bne.w	80037c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2319      	movs	r3, #25
 80035a6:	2201      	movs	r2, #1
 80035a8:	4988      	ldr	r1, [pc, #544]	; (80037cc <HAL_I2C_IsDeviceReady+0x254>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f994 	bl	80038d8 <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	e104      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_I2C_IsDeviceReady+0x50>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e0fd      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x24c>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d007      	beq.n	80035ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2224      	movs	r2, #36	; 0x24
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a70      	ldr	r2, [pc, #448]	; (80037d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003620:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2200      	movs	r2, #0
 800362a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f952 	bl	80038d8 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003648:	d103      	bne.n	8003652 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0b6      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003664:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003666:	f7fe f9c7 	bl	80019f8 <HAL_GetTick>
 800366a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800369a:	e025      	b.n	80036e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fe f9ac 	bl	80019f8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <HAL_I2C_IsDeviceReady+0x13a>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	22a0      	movs	r2, #160	; 0xa0
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2ba0      	cmp	r3, #160	; 0xa0
 80036f2:	d005      	beq.n	8003700 <HAL_I2C_IsDeviceReady+0x188>
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_I2C_IsDeviceReady+0x188>
 80036fa:	7dbb      	ldrb	r3, [r7, #22]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0cd      	beq.n	800369c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d129      	bne.n	800376a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003724:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2319      	movs	r3, #25
 8003742:	2201      	movs	r2, #1
 8003744:	4921      	ldr	r1, [pc, #132]	; (80037cc <HAL_I2C_IsDeviceReady+0x254>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f8c6 	bl	80038d8 <I2C_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e036      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e02c      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003782:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2319      	movs	r3, #25
 800378a:	2201      	movs	r2, #1
 800378c:	490f      	ldr	r1, [pc, #60]	; (80037cc <HAL_I2C_IsDeviceReady+0x254>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f8a2 	bl	80038d8 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e012      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	f4ff af32 	bcc.w	8003612 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	00100002 	.word	0x00100002
 80037d0:	ffff0000 	.word	0xffff0000

080037d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	460b      	mov	r3, r1
 80037e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d006      	beq.n	80037fe <I2C_MasterRequestWrite+0x2a>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d003      	beq.n	80037fe <I2C_MasterRequestWrite+0x2a>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037fc:	d108      	bne.n	8003810 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00b      	b.n	8003828 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	2b12      	cmp	r3, #18
 8003816:	d107      	bne.n	8003828 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003826:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f84f 	bl	80038d8 <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384e:	d103      	bne.n	8003858 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e035      	b.n	80038c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003864:	d108      	bne.n	8003878 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003874:	611a      	str	r2, [r3, #16]
 8003876:	e01b      	b.n	80038b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003878:	897b      	ldrh	r3, [r7, #10]
 800387a:	11db      	asrs	r3, r3, #7
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0306 	and.w	r3, r3, #6
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f063 030f 	orn	r3, r3, #15
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	490e      	ldr	r1, [pc, #56]	; (80038d0 <I2C_MasterRequestWrite+0xfc>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f875 	bl	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e010      	b.n	80038c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4907      	ldr	r1, [pc, #28]	; (80038d4 <I2C_MasterRequestWrite+0x100>)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f865 	bl	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	00010008 	.word	0x00010008
 80038d4:	00010002 	.word	0x00010002

080038d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e8:	e025      	b.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f0:	d021      	beq.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7fe f881 	bl	80019f8 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d116      	bne.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e023      	b.n	800397e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10d      	bne.n	800395c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	e00c      	b.n	8003976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d0b6      	beq.n	80038ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003994:	e051      	b.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a4:	d123      	bne.n	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f043 0204 	orr.w	r2, r3, #4
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e046      	b.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f4:	d021      	beq.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7fd ffff 	bl	80019f8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d116      	bne.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 0220 	orr.w	r2, r3, #32
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e020      	b.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10c      	bne.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	e00b      	b.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	43da      	mvns	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d18d      	bne.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a90:	e02d      	b.n	8003aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f878 	bl	8003b88 <I2C_IsAcknowledgeFailed>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e02d      	b.n	8003afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa8:	d021      	beq.n	8003aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fd ffa5 	bl	80019f8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d1ca      	bne.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b12:	e02d      	b.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f837 	bl	8003b88 <I2C_IsAcknowledgeFailed>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e02d      	b.n	8003b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2a:	d021      	beq.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fd ff64 	bl	80019f8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e007      	b.n	8003b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d1ca      	bne.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d11b      	bne.n	8003bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e267      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d075      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d00c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d112      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b82      	ldr	r3, [pc, #520]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	4b7e      	ldr	r3, [pc, #504]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d05b      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x108>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d157      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e242      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d106      	bne.n	8003c5c <HAL_RCC_OscConfig+0x74>
 8003c4e:	4b76      	ldr	r3, [pc, #472]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a75      	ldr	r2, [pc, #468]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e01d      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x98>
 8003c66:	4b70      	ldr	r3, [pc, #448]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6f      	ldr	r2, [pc, #444]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b6d      	ldr	r3, [pc, #436]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6c      	ldr	r2, [pc, #432]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c80:	4b69      	ldr	r3, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a68      	ldr	r2, [pc, #416]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b66      	ldr	r3, [pc, #408]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fd feaa 	bl	80019f8 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fea6 	bl	80019f8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e207      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xc0>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fe96 	bl	80019f8 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fd fe92 	bl	80019f8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1f3      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce2:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xe8>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d063      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d11c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b44      	ldr	r3, [pc, #272]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d116      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e1c7      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4937      	ldr	r1, [pc, #220]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	e03a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d58:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fd fe4b 	bl	80019f8 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d66:	f7fd fe47 	bl	80019f8 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e1a8      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4925      	ldr	r1, [pc, #148]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fe2a 	bl	80019f8 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fd fe26 	bl	80019f8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e187      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d036      	beq.n	8003e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_RCC_OscConfig+0x248>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd fe0a 	bl	80019f8 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fd fe06 	bl	80019f8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e167      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x200>
 8003e06:	e01b      	b.n	8003e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_OscConfig+0x248>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fd fdf3 	bl	80019f8 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	e00e      	b.n	8003e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fd fdef 	bl	80019f8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d907      	bls.n	8003e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e150      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	42470000 	.word	0x42470000
 8003e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ea      	bne.n	8003e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8097 	beq.w	8003f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b81      	ldr	r3, [pc, #516]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	4b7d      	ldr	r3, [pc, #500]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a7c      	ldr	r2, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b77      	ldr	r3, [pc, #476]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8a:	4b74      	ldr	r3, [pc, #464]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a73      	ldr	r2, [pc, #460]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fd fdaf 	bl	80019f8 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fd fdab 	bl	80019f8 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e10c      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x2ea>
 8003ec4:	4b64      	ldr	r3, [pc, #400]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a63      	ldr	r2, [pc, #396]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	e01c      	b.n	8003f0c <HAL_RCC_OscConfig+0x324>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x30c>
 8003eda:	4b5f      	ldr	r3, [pc, #380]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a5e      	ldr	r2, [pc, #376]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a5b      	ldr	r2, [pc, #364]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0x324>
 8003ef4:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a57      	ldr	r2, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b55      	ldr	r3, [pc, #340]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a54      	ldr	r2, [pc, #336]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 0304 	bic.w	r3, r3, #4
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd fd70 	bl	80019f8 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fd fd6c 	bl	80019f8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e0cb      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ee      	beq.n	8003f1c <HAL_RCC_OscConfig+0x334>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f40:	f7fd fd5a 	bl	80019f8 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fd fd56 	bl	80019f8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0b5      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ee      	bne.n	8003f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	4a38      	ldr	r2, [pc, #224]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a1 	beq.w	80040c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d05c      	beq.n	800404c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d141      	bne.n	800401e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <HAL_RCC_OscConfig+0x478>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fd2a 	bl	80019f8 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fd fd26 	bl	80019f8 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e087      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	491b      	ldr	r1, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x478>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fcff 	bl	80019f8 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fd fcfb 	bl	80019f8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e05c      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x416>
 800401c:	e054      	b.n	80040c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_RCC_OscConfig+0x478>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd fce8 	bl	80019f8 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd fce4 	bl	80019f8 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e045      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x444>
 800404a:	e03d      	b.n	80040c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d107      	bne.n	8004064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e038      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000
 8004060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x4ec>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d028      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d121      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d11a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800409a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800409c:	4293      	cmp	r3, r2
 800409e:	d111      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	3b01      	subs	r3, #1
 80040ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800

080040d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0cc      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b68      	ldr	r3, [pc, #416]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d90c      	bls.n	8004114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b65      	ldr	r3, [pc, #404]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b63      	ldr	r3, [pc, #396]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b8      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800412c:	4b59      	ldr	r3, [pc, #356]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a58      	ldr	r2, [pc, #352]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004144:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a52      	ldr	r2, [pc, #328]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800414e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b50      	ldr	r3, [pc, #320]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	494d      	ldr	r1, [pc, #308]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d044      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d119      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d003      	beq.n	8004196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	2b03      	cmp	r3, #3
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	4b3b      	ldr	r3, [pc, #236]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e067      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4934      	ldr	r1, [pc, #208]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c8:	f7fd fc16 	bl	80019f8 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd fc12 	bl	80019f8 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e04f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d20c      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b22      	ldr	r3, [pc, #136]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e032      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4916      	ldr	r1, [pc, #88]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	490e      	ldr	r1, [pc, #56]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800425e:	f000 f821 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8004262:	4602      	mov	r2, r0
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	490a      	ldr	r1, [pc, #40]	; (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	5ccb      	ldrb	r3, [r1, r3]
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd fb76 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023c00 	.word	0x40023c00
 8004294:	40023800 	.word	0x40023800
 8004298:	080068f8 	.word	0x080068f8
 800429c:	20000000 	.word	0x20000000
 80042a0:	20000004 	.word	0x20000004

080042a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b094      	sub	sp, #80	; 0x50
 80042aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	647b      	str	r3, [r7, #68]	; 0x44
 80042b0:	2300      	movs	r3, #0
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b4:	2300      	movs	r3, #0
 80042b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042bc:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x40>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	f200 80e1 	bhi.w	8004490 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x34>
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d003      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0x3a>
 80042d6:	e0db      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042dc:	e0db      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042de:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_GetSysClockFreq+0x208>)
 80042e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042e2:	e0d8      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e4:	4b6f      	ldr	r3, [pc, #444]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ee:	4b6d      	ldr	r3, [pc, #436]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d063      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	2200      	movs	r2, #0
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
 8004304:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430c:	633b      	str	r3, [r7, #48]	; 0x30
 800430e:	2300      	movs	r3, #0
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
 8004312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004316:	4622      	mov	r2, r4
 8004318:	462b      	mov	r3, r5
 800431a:	f04f 0000 	mov.w	r0, #0
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	0159      	lsls	r1, r3, #5
 8004324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004328:	0150      	lsls	r0, r2, #5
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4621      	mov	r1, r4
 8004330:	1a51      	subs	r1, r2, r1
 8004332:	6139      	str	r1, [r7, #16]
 8004334:	4629      	mov	r1, r5
 8004336:	eb63 0301 	sbc.w	r3, r3, r1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004348:	4659      	mov	r1, fp
 800434a:	018b      	lsls	r3, r1, #6
 800434c:	4651      	mov	r1, sl
 800434e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004352:	4651      	mov	r1, sl
 8004354:	018a      	lsls	r2, r1, #6
 8004356:	4651      	mov	r1, sl
 8004358:	ebb2 0801 	subs.w	r8, r2, r1
 800435c:	4659      	mov	r1, fp
 800435e:	eb63 0901 	sbc.w	r9, r3, r1
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	4623      	mov	r3, r4
 800437c:	eb18 0303 	adds.w	r3, r8, r3
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	462b      	mov	r3, r5
 8004384:	eb49 0303 	adc.w	r3, r9, r3
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004396:	4629      	mov	r1, r5
 8004398:	024b      	lsls	r3, r1, #9
 800439a:	4621      	mov	r1, r4
 800439c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043a0:	4621      	mov	r1, r4
 80043a2:	024a      	lsls	r2, r1, #9
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b4:	f7fb ff6c 	bl	8000290 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4613      	mov	r3, r2
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	e058      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c2:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	2200      	movs	r2, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	4611      	mov	r1, r2
 80043ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	0159      	lsls	r1, r3, #5
 80043ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ee:	0150      	lsls	r0, r2, #5
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4641      	mov	r1, r8
 80043f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043fa:	4649      	mov	r1, r9
 80043fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800440c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004414:	ebb2 040a 	subs.w	r4, r2, sl
 8004418:	eb63 050b 	sbc.w	r5, r3, fp
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	00eb      	lsls	r3, r5, #3
 8004426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800442a:	00e2      	lsls	r2, r4, #3
 800442c:	4614      	mov	r4, r2
 800442e:	461d      	mov	r5, r3
 8004430:	4643      	mov	r3, r8
 8004432:	18e3      	adds	r3, r4, r3
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	464b      	mov	r3, r9
 8004438:	eb45 0303 	adc.w	r3, r5, r3
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800444a:	4629      	mov	r1, r5
 800444c:	028b      	lsls	r3, r1, #10
 800444e:	4621      	mov	r1, r4
 8004450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004454:	4621      	mov	r1, r4
 8004456:	028a      	lsls	r2, r1, #10
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445e:	2200      	movs	r2, #0
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	61fa      	str	r2, [r7, #28]
 8004464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004468:	f7fb ff12 	bl	8000290 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4613      	mov	r3, r2
 8004472:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	3301      	adds	r3, #1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800448e:	e002      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004498:	4618      	mov	r0, r3
 800449a:	3750      	adds	r7, #80	; 0x50
 800449c:	46bd      	mov	sp, r7
 800449e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800
 80044a8:	00f42400 	.word	0x00f42400
 80044ac:	007a1200 	.word	0x007a1200

080044b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000000 	.word	0x20000000

080044c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044cc:	f7ff fff0 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0a9b      	lsrs	r3, r3, #10
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	08006908 	.word	0x08006908

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044f4:	f7ff ffdc 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0b5b      	lsrs	r3, r3, #13
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	08006908 	.word	0x08006908

08004518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e041      	b.n	80045ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd f834 	bl	80015ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fa88 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e044      	b.n	800465a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_TIM_Base_Start_IT+0xb0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d013      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_TIM_Base_Start_IT+0xb4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_TIM_Base_Start_IT+0xb8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a17      	ldr	r2, [pc, #92]	; (8004674 <HAL_TIM_Base_Start_IT+0xbc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x6c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_TIM_Base_Start_IT+0xc0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d111      	bne.n	8004648 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b06      	cmp	r3, #6
 8004634:	d010      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	e007      	b.n	8004658 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40014000 	.word	0x40014000

0800467c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0202 	mvn.w	r2, #2
 80046a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9b5 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9a7 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9b8 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0204 	mvn.w	r2, #4
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f98b 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f97d 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f98e 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d122      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d11b      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0208 	mvn.w	r2, #8
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2204      	movs	r2, #4
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f961 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f953 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f964 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0210 	mvn.w	r2, #16
 80047a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2208      	movs	r2, #8
 80047aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f937 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f929 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f93a 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10e      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0201 	mvn.w	r2, #1
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fb fec6 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d10e      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d107      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fab2 	bl	8004d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d10e      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d107      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8ff 	bl	8004a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b20      	cmp	r3, #32
 8004864:	d10e      	bne.n	8004884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b20      	cmp	r3, #32
 8004872:	d107      	bne.n	8004884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0220 	mvn.w	r2, #32
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa7c 	bl	8004d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_TIM_ConfigClockSource+0x1c>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e0b4      	b.n	8004a12 <HAL_TIM_ConfigClockSource+0x186>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d03e      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0xd4>
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e6:	f200 8087 	bhi.w	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	f000 8086 	beq.w	80049fe <HAL_TIM_ConfigClockSource+0x172>
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d87f      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d01a      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0xa6>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d87b      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b60      	cmp	r3, #96	; 0x60
 8004902:	d050      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d877      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b50      	cmp	r3, #80	; 0x50
 800490a:	d03c      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0xfa>
 800490c:	2b50      	cmp	r3, #80	; 0x50
 800490e:	d873      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d058      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d86f      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b30      	cmp	r3, #48	; 0x30
 800491a:	d064      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d86b      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d060      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d867      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d05c      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	2b10      	cmp	r3, #16
 800492e:	d05a      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004930:	e062      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6899      	ldr	r1, [r3, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f000 f98d 	bl	8004c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	609a      	str	r2, [r3, #8]
      break;
 800495e:	e04f      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f000 f976 	bl	8004c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004982:	609a      	str	r2, [r3, #8]
      break;
 8004984:	e03c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	461a      	mov	r2, r3
 8004994:	f000 f8ea 	bl	8004b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2150      	movs	r1, #80	; 0x50
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f943 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80049a4:	e02c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 f909 	bl	8004bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2160      	movs	r1, #96	; 0x60
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f933 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80049c4:	e01c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f000 f8ca 	bl	8004b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f923 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80049e4:	e00c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 f91a 	bl	8004c2a <TIM_ITRx_SetConfig>
      break;
 80049f6:	e003      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e000      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00f      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a31      	ldr	r2, [pc, #196]	; (8004b54 <TIM_Base_SetConfig+0xe8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a30      	ldr	r2, [pc, #192]	; (8004b58 <TIM_Base_SetConfig+0xec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0x38>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <TIM_Base_SetConfig+0xf0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <TIM_Base_SetConfig+0xe8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <TIM_Base_SetConfig+0xec>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <TIM_Base_SetConfig+0xf0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <TIM_Base_SetConfig+0xf4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <TIM_Base_SetConfig+0xf8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0x8a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <TIM_Base_SetConfig+0xfc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <TIM_Base_SetConfig+0xe4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d103      	bne.n	8004b3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	615a      	str	r2, [r3, #20]
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f023 0201 	bic.w	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 030a 	bic.w	r3, r3, #10
 8004ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b087      	sub	sp, #28
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0210 	bic.w	r2, r3, #16
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f043 0307 	orr.w	r3, r3, #7
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	609a      	str	r2, [r3, #8]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	021a      	lsls	r2, r3, #8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e050      	b.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d013      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10c      	bne.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40014000 	.word	0x40014000

08004d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e03f      	b.n	8004e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fc14 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2224      	movs	r2, #36	; 0x24
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f929 	bl	8005040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b08a      	sub	sp, #40	; 0x28
 8004e42:	af02      	add	r7, sp, #8
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d17c      	bne.n	8004f58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_UART_Transmit+0x2c>
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e075      	b.n	8004f5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_UART_Transmit+0x3e>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e06e      	b.n	8004f5a <HAL_UART_Transmit+0x11c>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2221      	movs	r2, #33	; 0x21
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e92:	f7fc fdb1 	bl	80019f8 <HAL_GetTick>
 8004e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	88fa      	ldrh	r2, [r7, #6]
 8004ea2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eac:	d108      	bne.n	8004ec0 <HAL_UART_Transmit+0x82>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	e003      	b.n	8004ec8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ed0:	e02a      	b.n	8004f28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2180      	movs	r1, #128	; 0x80
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f840 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e036      	b.n	8004f5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	3302      	adds	r3, #2
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e007      	b.n	8004f1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1cf      	bne.n	8004ed2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2140      	movs	r1, #64	; 0x40
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f810 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b090      	sub	sp, #64	; 0x40
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f72:	e050      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7a:	d04c      	beq.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f82:	f7fc fd39 	bl	80019f8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d241      	bcs.n	8005016 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fb2:	637a      	str	r2, [r7, #52]	; 0x34
 8004fb4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fe6:	623a      	str	r2, [r7, #32]
 8004fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	69f9      	ldr	r1, [r7, #28]
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e00f      	b.n	8005036 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	429a      	cmp	r2, r3
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	429a      	cmp	r2, r3
 8005032:	d09f      	beq.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3740      	adds	r7, #64	; 0x40
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005044:	b0c0      	sub	sp, #256	; 0x100
 8005046:	af00      	add	r7, sp, #0
 8005048:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	68d9      	ldr	r1, [r3, #12]
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	ea40 0301 	orr.w	r3, r0, r1
 8005068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	431a      	orrs	r2, r3
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005098:	f021 010c 	bic.w	r1, r1, #12
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050a6:	430b      	orrs	r3, r1
 80050a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ba:	6999      	ldr	r1, [r3, #24]
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	ea40 0301 	orr.w	r3, r0, r1
 80050c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b8f      	ldr	r3, [pc, #572]	; (800530c <UART_SetConfig+0x2cc>)
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d005      	beq.n	80050e0 <UART_SetConfig+0xa0>
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b8d      	ldr	r3, [pc, #564]	; (8005310 <UART_SetConfig+0x2d0>)
 80050dc:	429a      	cmp	r2, r3
 80050de:	d104      	bne.n	80050ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7ff fa06 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 80050e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050e8:	e003      	b.n	80050f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ea:	f7ff f9ed 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 80050ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fc:	f040 810c 	bne.w	8005318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800510a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800510e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005112:	4622      	mov	r2, r4
 8005114:	462b      	mov	r3, r5
 8005116:	1891      	adds	r1, r2, r2
 8005118:	65b9      	str	r1, [r7, #88]	; 0x58
 800511a:	415b      	adcs	r3, r3
 800511c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800511e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005122:	4621      	mov	r1, r4
 8005124:	eb12 0801 	adds.w	r8, r2, r1
 8005128:	4629      	mov	r1, r5
 800512a:	eb43 0901 	adc.w	r9, r3, r1
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005142:	4690      	mov	r8, r2
 8005144:	4699      	mov	r9, r3
 8005146:	4623      	mov	r3, r4
 8005148:	eb18 0303 	adds.w	r3, r8, r3
 800514c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005150:	462b      	mov	r3, r5
 8005152:	eb49 0303 	adc.w	r3, r9, r3
 8005156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005166:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800516a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800516e:	460b      	mov	r3, r1
 8005170:	18db      	adds	r3, r3, r3
 8005172:	653b      	str	r3, [r7, #80]	; 0x50
 8005174:	4613      	mov	r3, r2
 8005176:	eb42 0303 	adc.w	r3, r2, r3
 800517a:	657b      	str	r3, [r7, #84]	; 0x54
 800517c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005184:	f7fb f884 	bl	8000290 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4b61      	ldr	r3, [pc, #388]	; (8005314 <UART_SetConfig+0x2d4>)
 800518e:	fba3 2302 	umull	r2, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	011c      	lsls	r4, r3, #4
 8005196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	1891      	adds	r1, r2, r2
 80051ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80051b0:	415b      	adcs	r3, r3
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051b8:	4641      	mov	r1, r8
 80051ba:	eb12 0a01 	adds.w	sl, r2, r1
 80051be:	4649      	mov	r1, r9
 80051c0:	eb43 0b01 	adc.w	fp, r3, r1
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051d8:	4692      	mov	sl, r2
 80051da:	469b      	mov	fp, r3
 80051dc:	4643      	mov	r3, r8
 80051de:	eb1a 0303 	adds.w	r3, sl, r3
 80051e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051e6:	464b      	mov	r3, r9
 80051e8:	eb4b 0303 	adc.w	r3, fp, r3
 80051ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005204:	460b      	mov	r3, r1
 8005206:	18db      	adds	r3, r3, r3
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
 800520a:	4613      	mov	r3, r2
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
 8005212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800521a:	f7fb f839 	bl	8000290 <__aeabi_uldivmod>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4611      	mov	r1, r2
 8005224:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <UART_SetConfig+0x2d4>)
 8005226:	fba3 2301 	umull	r2, r3, r3, r1
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2264      	movs	r2, #100	; 0x64
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	1acb      	subs	r3, r1, r3
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800523a:	4b36      	ldr	r3, [pc, #216]	; (8005314 <UART_SetConfig+0x2d4>)
 800523c:	fba3 2302 	umull	r2, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005248:	441c      	add	r4, r3
 800524a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005254:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	1891      	adds	r1, r2, r2
 8005262:	63b9      	str	r1, [r7, #56]	; 0x38
 8005264:	415b      	adcs	r3, r3
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800526c:	4641      	mov	r1, r8
 800526e:	1851      	adds	r1, r2, r1
 8005270:	6339      	str	r1, [r7, #48]	; 0x30
 8005272:	4649      	mov	r1, r9
 8005274:	414b      	adcs	r3, r1
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005284:	4659      	mov	r1, fp
 8005286:	00cb      	lsls	r3, r1, #3
 8005288:	4651      	mov	r1, sl
 800528a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528e:	4651      	mov	r1, sl
 8005290:	00ca      	lsls	r2, r1, #3
 8005292:	4610      	mov	r0, r2
 8005294:	4619      	mov	r1, r3
 8005296:	4603      	mov	r3, r0
 8005298:	4642      	mov	r2, r8
 800529a:	189b      	adds	r3, r3, r2
 800529c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a0:	464b      	mov	r3, r9
 80052a2:	460a      	mov	r2, r1
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052c0:	460b      	mov	r3, r1
 80052c2:	18db      	adds	r3, r3, r3
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c6:	4613      	mov	r3, r2
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052d6:	f7fa ffdb 	bl	8000290 <__aeabi_uldivmod>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <UART_SetConfig+0x2d4>)
 80052e0:	fba3 1302 	umull	r1, r3, r3, r2
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	2164      	movs	r1, #100	; 0x64
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	3332      	adds	r3, #50	; 0x32
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <UART_SetConfig+0x2d4>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	f003 0207 	and.w	r2, r3, #7
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4422      	add	r2, r4
 8005306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005308:	e106      	b.n	8005518 <UART_SetConfig+0x4d8>
 800530a:	bf00      	nop
 800530c:	40011000 	.word	0x40011000
 8005310:	40011400 	.word	0x40011400
 8005314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531c:	2200      	movs	r2, #0
 800531e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005322:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800532a:	4642      	mov	r2, r8
 800532c:	464b      	mov	r3, r9
 800532e:	1891      	adds	r1, r2, r2
 8005330:	6239      	str	r1, [r7, #32]
 8005332:	415b      	adcs	r3, r3
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800533a:	4641      	mov	r1, r8
 800533c:	1854      	adds	r4, r2, r1
 800533e:	4649      	mov	r1, r9
 8005340:	eb43 0501 	adc.w	r5, r3, r1
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	00eb      	lsls	r3, r5, #3
 800534e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005352:	00e2      	lsls	r2, r4, #3
 8005354:	4614      	mov	r4, r2
 8005356:	461d      	mov	r5, r3
 8005358:	4643      	mov	r3, r8
 800535a:	18e3      	adds	r3, r4, r3
 800535c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005360:	464b      	mov	r3, r9
 8005362:	eb45 0303 	adc.w	r3, r5, r3
 8005366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005386:	4629      	mov	r1, r5
 8005388:	008b      	lsls	r3, r1, #2
 800538a:	4621      	mov	r1, r4
 800538c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005390:	4621      	mov	r1, r4
 8005392:	008a      	lsls	r2, r1, #2
 8005394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005398:	f7fa ff7a 	bl	8000290 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b60      	ldr	r3, [pc, #384]	; (8005524 <UART_SetConfig+0x4e4>)
 80053a2:	fba3 2302 	umull	r2, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	011c      	lsls	r4, r3, #4
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	61b9      	str	r1, [r7, #24]
 80053c4:	415b      	adcs	r3, r3
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053cc:	4641      	mov	r1, r8
 80053ce:	1851      	adds	r1, r2, r1
 80053d0:	6139      	str	r1, [r7, #16]
 80053d2:	4649      	mov	r1, r9
 80053d4:	414b      	adcs	r3, r1
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e4:	4659      	mov	r1, fp
 80053e6:	00cb      	lsls	r3, r1, #3
 80053e8:	4651      	mov	r1, sl
 80053ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ee:	4651      	mov	r1, sl
 80053f0:	00ca      	lsls	r2, r1, #3
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	4642      	mov	r2, r8
 80053fa:	189b      	adds	r3, r3, r2
 80053fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005400:	464b      	mov	r3, r9
 8005402:	460a      	mov	r2, r1
 8005404:	eb42 0303 	adc.w	r3, r2, r3
 8005408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	67bb      	str	r3, [r7, #120]	; 0x78
 8005416:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005424:	4649      	mov	r1, r9
 8005426:	008b      	lsls	r3, r1, #2
 8005428:	4641      	mov	r1, r8
 800542a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542e:	4641      	mov	r1, r8
 8005430:	008a      	lsls	r2, r1, #2
 8005432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005436:	f7fa ff2b 	bl	8000290 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4611      	mov	r1, r2
 8005440:	4b38      	ldr	r3, [pc, #224]	; (8005524 <UART_SetConfig+0x4e4>)
 8005442:	fba3 2301 	umull	r2, r3, r3, r1
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2264      	movs	r2, #100	; 0x64
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	1acb      	subs	r3, r1, r3
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	3332      	adds	r3, #50	; 0x32
 8005454:	4a33      	ldr	r2, [pc, #204]	; (8005524 <UART_SetConfig+0x4e4>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005460:	441c      	add	r4, r3
 8005462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005466:	2200      	movs	r2, #0
 8005468:	673b      	str	r3, [r7, #112]	; 0x70
 800546a:	677a      	str	r2, [r7, #116]	; 0x74
 800546c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	1891      	adds	r1, r2, r2
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	415b      	adcs	r3, r3
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005480:	4641      	mov	r1, r8
 8005482:	1851      	adds	r1, r2, r1
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	4649      	mov	r1, r9
 8005488:	414b      	adcs	r3, r1
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005498:	4659      	mov	r1, fp
 800549a:	00cb      	lsls	r3, r1, #3
 800549c:	4651      	mov	r1, sl
 800549e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a2:	4651      	mov	r1, sl
 80054a4:	00ca      	lsls	r2, r1, #3
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	4642      	mov	r2, r8
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b2:	464b      	mov	r3, r9
 80054b4:	460a      	mov	r2, r1
 80054b6:	eb42 0303 	adc.w	r3, r2, r3
 80054ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	663b      	str	r3, [r7, #96]	; 0x60
 80054c6:	667a      	str	r2, [r7, #100]	; 0x64
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054d4:	4649      	mov	r1, r9
 80054d6:	008b      	lsls	r3, r1, #2
 80054d8:	4641      	mov	r1, r8
 80054da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054de:	4641      	mov	r1, r8
 80054e0:	008a      	lsls	r2, r1, #2
 80054e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054e6:	f7fa fed3 	bl	8000290 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <UART_SetConfig+0x4e4>)
 80054f0:	fba3 1302 	umull	r1, r3, r3, r2
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	2164      	movs	r1, #100	; 0x64
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	3332      	adds	r3, #50	; 0x32
 8005502:	4a08      	ldr	r2, [pc, #32]	; (8005524 <UART_SetConfig+0x4e4>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	f003 020f 	and.w	r2, r3, #15
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4422      	add	r2, r4
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800551e:	46bd      	mov	sp, r7
 8005520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005524:	51eb851f 	.word	0x51eb851f

08005528 <siprintf>:
 8005528:	b40e      	push	{r1, r2, r3}
 800552a:	b500      	push	{lr}
 800552c:	b09c      	sub	sp, #112	; 0x70
 800552e:	ab1d      	add	r3, sp, #116	; 0x74
 8005530:	9002      	str	r0, [sp, #8]
 8005532:	9006      	str	r0, [sp, #24]
 8005534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005538:	4809      	ldr	r0, [pc, #36]	; (8005560 <siprintf+0x38>)
 800553a:	9107      	str	r1, [sp, #28]
 800553c:	9104      	str	r1, [sp, #16]
 800553e:	4909      	ldr	r1, [pc, #36]	; (8005564 <siprintf+0x3c>)
 8005540:	f853 2b04 	ldr.w	r2, [r3], #4
 8005544:	9105      	str	r1, [sp, #20]
 8005546:	6800      	ldr	r0, [r0, #0]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	a902      	add	r1, sp, #8
 800554c:	f000 f9ba 	bl	80058c4 <_svfiprintf_r>
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	b01c      	add	sp, #112	; 0x70
 8005558:	f85d eb04 	ldr.w	lr, [sp], #4
 800555c:	b003      	add	sp, #12
 800555e:	4770      	bx	lr
 8005560:	20000064 	.word	0x20000064
 8005564:	ffff0208 	.word	0xffff0208

08005568 <rand>:
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <rand+0x5c>)
 800556a:	b510      	push	{r4, lr}
 800556c:	681c      	ldr	r4, [r3, #0]
 800556e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005570:	b9b3      	cbnz	r3, 80055a0 <rand+0x38>
 8005572:	2018      	movs	r0, #24
 8005574:	f000 faa4 	bl	8005ac0 <malloc>
 8005578:	4602      	mov	r2, r0
 800557a:	6320      	str	r0, [r4, #48]	; 0x30
 800557c:	b920      	cbnz	r0, 8005588 <rand+0x20>
 800557e:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <rand+0x60>)
 8005580:	4812      	ldr	r0, [pc, #72]	; (80055cc <rand+0x64>)
 8005582:	2152      	movs	r1, #82	; 0x52
 8005584:	f000 f926 	bl	80057d4 <__assert_func>
 8005588:	4911      	ldr	r1, [pc, #68]	; (80055d0 <rand+0x68>)
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <rand+0x6c>)
 800558c:	e9c0 1300 	strd	r1, r3, [r0]
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <rand+0x70>)
 8005592:	6083      	str	r3, [r0, #8]
 8005594:	230b      	movs	r3, #11
 8005596:	8183      	strh	r3, [r0, #12]
 8005598:	2100      	movs	r1, #0
 800559a:	2001      	movs	r0, #1
 800559c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80055a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055a2:	480e      	ldr	r0, [pc, #56]	; (80055dc <rand+0x74>)
 80055a4:	690b      	ldr	r3, [r1, #16]
 80055a6:	694c      	ldr	r4, [r1, #20]
 80055a8:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <rand+0x78>)
 80055aa:	4358      	muls	r0, r3
 80055ac:	fb02 0004 	mla	r0, r2, r4, r0
 80055b0:	fba3 3202 	umull	r3, r2, r3, r2
 80055b4:	3301      	adds	r3, #1
 80055b6:	eb40 0002 	adc.w	r0, r0, r2
 80055ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80055be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80055c2:	bd10      	pop	{r4, pc}
 80055c4:	20000064 	.word	0x20000064
 80055c8:	08006918 	.word	0x08006918
 80055cc:	0800692f 	.word	0x0800692f
 80055d0:	abcd330e 	.word	0xabcd330e
 80055d4:	e66d1234 	.word	0xe66d1234
 80055d8:	0005deec 	.word	0x0005deec
 80055dc:	5851f42d 	.word	0x5851f42d
 80055e0:	4c957f2d 	.word	0x4c957f2d

080055e4 <std>:
 80055e4:	2300      	movs	r3, #0
 80055e6:	b510      	push	{r4, lr}
 80055e8:	4604      	mov	r4, r0
 80055ea:	e9c0 3300 	strd	r3, r3, [r0]
 80055ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055f2:	6083      	str	r3, [r0, #8]
 80055f4:	8181      	strh	r1, [r0, #12]
 80055f6:	6643      	str	r3, [r0, #100]	; 0x64
 80055f8:	81c2      	strh	r2, [r0, #14]
 80055fa:	6183      	str	r3, [r0, #24]
 80055fc:	4619      	mov	r1, r3
 80055fe:	2208      	movs	r2, #8
 8005600:	305c      	adds	r0, #92	; 0x5c
 8005602:	f000 f8b1 	bl	8005768 <memset>
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <std+0x58>)
 8005608:	6263      	str	r3, [r4, #36]	; 0x24
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <std+0x5c>)
 800560c:	62a3      	str	r3, [r4, #40]	; 0x28
 800560e:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <std+0x60>)
 8005610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <std+0x64>)
 8005614:	6323      	str	r3, [r4, #48]	; 0x30
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <std+0x68>)
 8005618:	6224      	str	r4, [r4, #32]
 800561a:	429c      	cmp	r4, r3
 800561c:	d006      	beq.n	800562c <std+0x48>
 800561e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005622:	4294      	cmp	r4, r2
 8005624:	d002      	beq.n	800562c <std+0x48>
 8005626:	33d0      	adds	r3, #208	; 0xd0
 8005628:	429c      	cmp	r4, r3
 800562a:	d105      	bne.n	8005638 <std+0x54>
 800562c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005634:	f000 b8ca 	b.w	80057cc <__retarget_lock_init_recursive>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	080060a5 	.word	0x080060a5
 8005640:	080060c7 	.word	0x080060c7
 8005644:	080060ff 	.word	0x080060ff
 8005648:	08006123 	.word	0x08006123
 800564c:	20000228 	.word	0x20000228

08005650 <stdio_exit_handler>:
 8005650:	4a02      	ldr	r2, [pc, #8]	; (800565c <stdio_exit_handler+0xc>)
 8005652:	4903      	ldr	r1, [pc, #12]	; (8005660 <stdio_exit_handler+0x10>)
 8005654:	4803      	ldr	r0, [pc, #12]	; (8005664 <stdio_exit_handler+0x14>)
 8005656:	f000 b869 	b.w	800572c <_fwalk_sglue>
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c
 8005660:	0800603d 	.word	0x0800603d
 8005664:	20000018 	.word	0x20000018

08005668 <cleanup_stdio>:
 8005668:	6841      	ldr	r1, [r0, #4]
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <cleanup_stdio+0x34>)
 800566c:	4299      	cmp	r1, r3
 800566e:	b510      	push	{r4, lr}
 8005670:	4604      	mov	r4, r0
 8005672:	d001      	beq.n	8005678 <cleanup_stdio+0x10>
 8005674:	f000 fce2 	bl	800603c <_fflush_r>
 8005678:	68a1      	ldr	r1, [r4, #8]
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <cleanup_stdio+0x38>)
 800567c:	4299      	cmp	r1, r3
 800567e:	d002      	beq.n	8005686 <cleanup_stdio+0x1e>
 8005680:	4620      	mov	r0, r4
 8005682:	f000 fcdb 	bl	800603c <_fflush_r>
 8005686:	68e1      	ldr	r1, [r4, #12]
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <cleanup_stdio+0x3c>)
 800568a:	4299      	cmp	r1, r3
 800568c:	d004      	beq.n	8005698 <cleanup_stdio+0x30>
 800568e:	4620      	mov	r0, r4
 8005690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005694:	f000 bcd2 	b.w	800603c <_fflush_r>
 8005698:	bd10      	pop	{r4, pc}
 800569a:	bf00      	nop
 800569c:	20000228 	.word	0x20000228
 80056a0:	20000290 	.word	0x20000290
 80056a4:	200002f8 	.word	0x200002f8

080056a8 <global_stdio_init.part.0>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <global_stdio_init.part.0+0x30>)
 80056ac:	4c0b      	ldr	r4, [pc, #44]	; (80056dc <global_stdio_init.part.0+0x34>)
 80056ae:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <global_stdio_init.part.0+0x38>)
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	4620      	mov	r0, r4
 80056b4:	2200      	movs	r2, #0
 80056b6:	2104      	movs	r1, #4
 80056b8:	f7ff ff94 	bl	80055e4 <std>
 80056bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056c0:	2201      	movs	r2, #1
 80056c2:	2109      	movs	r1, #9
 80056c4:	f7ff ff8e 	bl	80055e4 <std>
 80056c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056cc:	2202      	movs	r2, #2
 80056ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d2:	2112      	movs	r1, #18
 80056d4:	f7ff bf86 	b.w	80055e4 <std>
 80056d8:	20000360 	.word	0x20000360
 80056dc:	20000228 	.word	0x20000228
 80056e0:	08005651 	.word	0x08005651

080056e4 <__sfp_lock_acquire>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sfp_lock_acquire+0x8>)
 80056e6:	f000 b872 	b.w	80057ce <__retarget_lock_acquire_recursive>
 80056ea:	bf00      	nop
 80056ec:	20000365 	.word	0x20000365

080056f0 <__sfp_lock_release>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__sfp_lock_release+0x8>)
 80056f2:	f000 b86d 	b.w	80057d0 <__retarget_lock_release_recursive>
 80056f6:	bf00      	nop
 80056f8:	20000365 	.word	0x20000365

080056fc <__sinit>:
 80056fc:	b510      	push	{r4, lr}
 80056fe:	4604      	mov	r4, r0
 8005700:	f7ff fff0 	bl	80056e4 <__sfp_lock_acquire>
 8005704:	6a23      	ldr	r3, [r4, #32]
 8005706:	b11b      	cbz	r3, 8005710 <__sinit+0x14>
 8005708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570c:	f7ff bff0 	b.w	80056f0 <__sfp_lock_release>
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__sinit+0x28>)
 8005712:	6223      	str	r3, [r4, #32]
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <__sinit+0x2c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f5      	bne.n	8005708 <__sinit+0xc>
 800571c:	f7ff ffc4 	bl	80056a8 <global_stdio_init.part.0>
 8005720:	e7f2      	b.n	8005708 <__sinit+0xc>
 8005722:	bf00      	nop
 8005724:	08005669 	.word	0x08005669
 8005728:	20000360 	.word	0x20000360

0800572c <_fwalk_sglue>:
 800572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005730:	4607      	mov	r7, r0
 8005732:	4688      	mov	r8, r1
 8005734:	4614      	mov	r4, r2
 8005736:	2600      	movs	r6, #0
 8005738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800573c:	f1b9 0901 	subs.w	r9, r9, #1
 8005740:	d505      	bpl.n	800574e <_fwalk_sglue+0x22>
 8005742:	6824      	ldr	r4, [r4, #0]
 8005744:	2c00      	cmp	r4, #0
 8005746:	d1f7      	bne.n	8005738 <_fwalk_sglue+0xc>
 8005748:	4630      	mov	r0, r6
 800574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574e:	89ab      	ldrh	r3, [r5, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d907      	bls.n	8005764 <_fwalk_sglue+0x38>
 8005754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005758:	3301      	adds	r3, #1
 800575a:	d003      	beq.n	8005764 <_fwalk_sglue+0x38>
 800575c:	4629      	mov	r1, r5
 800575e:	4638      	mov	r0, r7
 8005760:	47c0      	blx	r8
 8005762:	4306      	orrs	r6, r0
 8005764:	3568      	adds	r5, #104	; 0x68
 8005766:	e7e9      	b.n	800573c <_fwalk_sglue+0x10>

08005768 <memset>:
 8005768:	4402      	add	r2, r0
 800576a:	4603      	mov	r3, r0
 800576c:	4293      	cmp	r3, r2
 800576e:	d100      	bne.n	8005772 <memset+0xa>
 8005770:	4770      	bx	lr
 8005772:	f803 1b01 	strb.w	r1, [r3], #1
 8005776:	e7f9      	b.n	800576c <memset+0x4>

08005778 <__errno>:
 8005778:	4b01      	ldr	r3, [pc, #4]	; (8005780 <__errno+0x8>)
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000064 	.word	0x20000064

08005784 <__libc_init_array>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4d0d      	ldr	r5, [pc, #52]	; (80057bc <__libc_init_array+0x38>)
 8005788:	4c0d      	ldr	r4, [pc, #52]	; (80057c0 <__libc_init_array+0x3c>)
 800578a:	1b64      	subs	r4, r4, r5
 800578c:	10a4      	asrs	r4, r4, #2
 800578e:	2600      	movs	r6, #0
 8005790:	42a6      	cmp	r6, r4
 8005792:	d109      	bne.n	80057a8 <__libc_init_array+0x24>
 8005794:	4d0b      	ldr	r5, [pc, #44]	; (80057c4 <__libc_init_array+0x40>)
 8005796:	4c0c      	ldr	r4, [pc, #48]	; (80057c8 <__libc_init_array+0x44>)
 8005798:	f001 f886 	bl	80068a8 <_init>
 800579c:	1b64      	subs	r4, r4, r5
 800579e:	10a4      	asrs	r4, r4, #2
 80057a0:	2600      	movs	r6, #0
 80057a2:	42a6      	cmp	r6, r4
 80057a4:	d105      	bne.n	80057b2 <__libc_init_array+0x2e>
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ac:	4798      	blx	r3
 80057ae:	3601      	adds	r6, #1
 80057b0:	e7ee      	b.n	8005790 <__libc_init_array+0xc>
 80057b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b6:	4798      	blx	r3
 80057b8:	3601      	adds	r6, #1
 80057ba:	e7f2      	b.n	80057a2 <__libc_init_array+0x1e>
 80057bc:	08006a00 	.word	0x08006a00
 80057c0:	08006a00 	.word	0x08006a00
 80057c4:	08006a00 	.word	0x08006a00
 80057c8:	08006a04 	.word	0x08006a04

080057cc <__retarget_lock_init_recursive>:
 80057cc:	4770      	bx	lr

080057ce <__retarget_lock_acquire_recursive>:
 80057ce:	4770      	bx	lr

080057d0 <__retarget_lock_release_recursive>:
 80057d0:	4770      	bx	lr
	...

080057d4 <__assert_func>:
 80057d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057d6:	4614      	mov	r4, r2
 80057d8:	461a      	mov	r2, r3
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <__assert_func+0x2c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4605      	mov	r5, r0
 80057e0:	68d8      	ldr	r0, [r3, #12]
 80057e2:	b14c      	cbz	r4, 80057f8 <__assert_func+0x24>
 80057e4:	4b07      	ldr	r3, [pc, #28]	; (8005804 <__assert_func+0x30>)
 80057e6:	9100      	str	r1, [sp, #0]
 80057e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057ec:	4906      	ldr	r1, [pc, #24]	; (8005808 <__assert_func+0x34>)
 80057ee:	462b      	mov	r3, r5
 80057f0:	f000 fc9c 	bl	800612c <fiprintf>
 80057f4:	f000 fd5a 	bl	80062ac <abort>
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <__assert_func+0x38>)
 80057fa:	461c      	mov	r4, r3
 80057fc:	e7f3      	b.n	80057e6 <__assert_func+0x12>
 80057fe:	bf00      	nop
 8005800:	20000064 	.word	0x20000064
 8005804:	08006987 	.word	0x08006987
 8005808:	08006994 	.word	0x08006994
 800580c:	080069c2 	.word	0x080069c2

08005810 <__ssputs_r>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	688e      	ldr	r6, [r1, #8]
 8005816:	461f      	mov	r7, r3
 8005818:	42be      	cmp	r6, r7
 800581a:	680b      	ldr	r3, [r1, #0]
 800581c:	4682      	mov	sl, r0
 800581e:	460c      	mov	r4, r1
 8005820:	4690      	mov	r8, r2
 8005822:	d82c      	bhi.n	800587e <__ssputs_r+0x6e>
 8005824:	898a      	ldrh	r2, [r1, #12]
 8005826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800582a:	d026      	beq.n	800587a <__ssputs_r+0x6a>
 800582c:	6965      	ldr	r5, [r4, #20]
 800582e:	6909      	ldr	r1, [r1, #16]
 8005830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005834:	eba3 0901 	sub.w	r9, r3, r1
 8005838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800583c:	1c7b      	adds	r3, r7, #1
 800583e:	444b      	add	r3, r9
 8005840:	106d      	asrs	r5, r5, #1
 8005842:	429d      	cmp	r5, r3
 8005844:	bf38      	it	cc
 8005846:	461d      	movcc	r5, r3
 8005848:	0553      	lsls	r3, r2, #21
 800584a:	d527      	bpl.n	800589c <__ssputs_r+0x8c>
 800584c:	4629      	mov	r1, r5
 800584e:	f000 f95f 	bl	8005b10 <_malloc_r>
 8005852:	4606      	mov	r6, r0
 8005854:	b360      	cbz	r0, 80058b0 <__ssputs_r+0xa0>
 8005856:	6921      	ldr	r1, [r4, #16]
 8005858:	464a      	mov	r2, r9
 800585a:	f000 fd19 	bl	8006290 <memcpy>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005868:	81a3      	strh	r3, [r4, #12]
 800586a:	6126      	str	r6, [r4, #16]
 800586c:	6165      	str	r5, [r4, #20]
 800586e:	444e      	add	r6, r9
 8005870:	eba5 0509 	sub.w	r5, r5, r9
 8005874:	6026      	str	r6, [r4, #0]
 8005876:	60a5      	str	r5, [r4, #8]
 8005878:	463e      	mov	r6, r7
 800587a:	42be      	cmp	r6, r7
 800587c:	d900      	bls.n	8005880 <__ssputs_r+0x70>
 800587e:	463e      	mov	r6, r7
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	4632      	mov	r2, r6
 8005884:	4641      	mov	r1, r8
 8005886:	f000 fc92 	bl	80061ae <memmove>
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	1b9b      	subs	r3, r3, r6
 800588e:	60a3      	str	r3, [r4, #8]
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	4433      	add	r3, r6
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	2000      	movs	r0, #0
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	462a      	mov	r2, r5
 800589e:	f000 fc57 	bl	8006150 <_realloc_r>
 80058a2:	4606      	mov	r6, r0
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1e0      	bne.n	800586a <__ssputs_r+0x5a>
 80058a8:	6921      	ldr	r1, [r4, #16]
 80058aa:	4650      	mov	r0, sl
 80058ac:	f000 fd06 	bl	80062bc <_free_r>
 80058b0:	230c      	movs	r3, #12
 80058b2:	f8ca 3000 	str.w	r3, [sl]
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c2:	e7e9      	b.n	8005898 <__ssputs_r+0x88>

080058c4 <_svfiprintf_r>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	4698      	mov	r8, r3
 80058ca:	898b      	ldrh	r3, [r1, #12]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	b09d      	sub	sp, #116	; 0x74
 80058d0:	4607      	mov	r7, r0
 80058d2:	460d      	mov	r5, r1
 80058d4:	4614      	mov	r4, r2
 80058d6:	d50e      	bpl.n	80058f6 <_svfiprintf_r+0x32>
 80058d8:	690b      	ldr	r3, [r1, #16]
 80058da:	b963      	cbnz	r3, 80058f6 <_svfiprintf_r+0x32>
 80058dc:	2140      	movs	r1, #64	; 0x40
 80058de:	f000 f917 	bl	8005b10 <_malloc_r>
 80058e2:	6028      	str	r0, [r5, #0]
 80058e4:	6128      	str	r0, [r5, #16]
 80058e6:	b920      	cbnz	r0, 80058f2 <_svfiprintf_r+0x2e>
 80058e8:	230c      	movs	r3, #12
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f0:	e0d0      	b.n	8005a94 <_svfiprintf_r+0x1d0>
 80058f2:	2340      	movs	r3, #64	; 0x40
 80058f4:	616b      	str	r3, [r5, #20]
 80058f6:	2300      	movs	r3, #0
 80058f8:	9309      	str	r3, [sp, #36]	; 0x24
 80058fa:	2320      	movs	r3, #32
 80058fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005900:	f8cd 800c 	str.w	r8, [sp, #12]
 8005904:	2330      	movs	r3, #48	; 0x30
 8005906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005aac <_svfiprintf_r+0x1e8>
 800590a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800590e:	f04f 0901 	mov.w	r9, #1
 8005912:	4623      	mov	r3, r4
 8005914:	469a      	mov	sl, r3
 8005916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800591a:	b10a      	cbz	r2, 8005920 <_svfiprintf_r+0x5c>
 800591c:	2a25      	cmp	r2, #37	; 0x25
 800591e:	d1f9      	bne.n	8005914 <_svfiprintf_r+0x50>
 8005920:	ebba 0b04 	subs.w	fp, sl, r4
 8005924:	d00b      	beq.n	800593e <_svfiprintf_r+0x7a>
 8005926:	465b      	mov	r3, fp
 8005928:	4622      	mov	r2, r4
 800592a:	4629      	mov	r1, r5
 800592c:	4638      	mov	r0, r7
 800592e:	f7ff ff6f 	bl	8005810 <__ssputs_r>
 8005932:	3001      	adds	r0, #1
 8005934:	f000 80a9 	beq.w	8005a8a <_svfiprintf_r+0x1c6>
 8005938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800593a:	445a      	add	r2, fp
 800593c:	9209      	str	r2, [sp, #36]	; 0x24
 800593e:	f89a 3000 	ldrb.w	r3, [sl]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 80a1 	beq.w	8005a8a <_svfiprintf_r+0x1c6>
 8005948:	2300      	movs	r3, #0
 800594a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800594e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005952:	f10a 0a01 	add.w	sl, sl, #1
 8005956:	9304      	str	r3, [sp, #16]
 8005958:	9307      	str	r3, [sp, #28]
 800595a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800595e:	931a      	str	r3, [sp, #104]	; 0x68
 8005960:	4654      	mov	r4, sl
 8005962:	2205      	movs	r2, #5
 8005964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005968:	4850      	ldr	r0, [pc, #320]	; (8005aac <_svfiprintf_r+0x1e8>)
 800596a:	f7fa fc41 	bl	80001f0 <memchr>
 800596e:	9a04      	ldr	r2, [sp, #16]
 8005970:	b9d8      	cbnz	r0, 80059aa <_svfiprintf_r+0xe6>
 8005972:	06d0      	lsls	r0, r2, #27
 8005974:	bf44      	itt	mi
 8005976:	2320      	movmi	r3, #32
 8005978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800597c:	0711      	lsls	r1, r2, #28
 800597e:	bf44      	itt	mi
 8005980:	232b      	movmi	r3, #43	; 0x2b
 8005982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005986:	f89a 3000 	ldrb.w	r3, [sl]
 800598a:	2b2a      	cmp	r3, #42	; 0x2a
 800598c:	d015      	beq.n	80059ba <_svfiprintf_r+0xf6>
 800598e:	9a07      	ldr	r2, [sp, #28]
 8005990:	4654      	mov	r4, sl
 8005992:	2000      	movs	r0, #0
 8005994:	f04f 0c0a 	mov.w	ip, #10
 8005998:	4621      	mov	r1, r4
 800599a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800599e:	3b30      	subs	r3, #48	; 0x30
 80059a0:	2b09      	cmp	r3, #9
 80059a2:	d94d      	bls.n	8005a40 <_svfiprintf_r+0x17c>
 80059a4:	b1b0      	cbz	r0, 80059d4 <_svfiprintf_r+0x110>
 80059a6:	9207      	str	r2, [sp, #28]
 80059a8:	e014      	b.n	80059d4 <_svfiprintf_r+0x110>
 80059aa:	eba0 0308 	sub.w	r3, r0, r8
 80059ae:	fa09 f303 	lsl.w	r3, r9, r3
 80059b2:	4313      	orrs	r3, r2
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	46a2      	mov	sl, r4
 80059b8:	e7d2      	b.n	8005960 <_svfiprintf_r+0x9c>
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	1d19      	adds	r1, r3, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	9103      	str	r1, [sp, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bfbb      	ittet	lt
 80059c6:	425b      	neglt	r3, r3
 80059c8:	f042 0202 	orrlt.w	r2, r2, #2
 80059cc:	9307      	strge	r3, [sp, #28]
 80059ce:	9307      	strlt	r3, [sp, #28]
 80059d0:	bfb8      	it	lt
 80059d2:	9204      	strlt	r2, [sp, #16]
 80059d4:	7823      	ldrb	r3, [r4, #0]
 80059d6:	2b2e      	cmp	r3, #46	; 0x2e
 80059d8:	d10c      	bne.n	80059f4 <_svfiprintf_r+0x130>
 80059da:	7863      	ldrb	r3, [r4, #1]
 80059dc:	2b2a      	cmp	r3, #42	; 0x2a
 80059de:	d134      	bne.n	8005a4a <_svfiprintf_r+0x186>
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	1d1a      	adds	r2, r3, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	9203      	str	r2, [sp, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bfb8      	it	lt
 80059ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059f0:	3402      	adds	r4, #2
 80059f2:	9305      	str	r3, [sp, #20]
 80059f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005abc <_svfiprintf_r+0x1f8>
 80059f8:	7821      	ldrb	r1, [r4, #0]
 80059fa:	2203      	movs	r2, #3
 80059fc:	4650      	mov	r0, sl
 80059fe:	f7fa fbf7 	bl	80001f0 <memchr>
 8005a02:	b138      	cbz	r0, 8005a14 <_svfiprintf_r+0x150>
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	eba0 000a 	sub.w	r0, r0, sl
 8005a0a:	2240      	movs	r2, #64	; 0x40
 8005a0c:	4082      	lsls	r2, r0
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	3401      	adds	r4, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a18:	4825      	ldr	r0, [pc, #148]	; (8005ab0 <_svfiprintf_r+0x1ec>)
 8005a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a1e:	2206      	movs	r2, #6
 8005a20:	f7fa fbe6 	bl	80001f0 <memchr>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d038      	beq.n	8005a9a <_svfiprintf_r+0x1d6>
 8005a28:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <_svfiprintf_r+0x1f0>)
 8005a2a:	bb1b      	cbnz	r3, 8005a74 <_svfiprintf_r+0x1b0>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	3307      	adds	r3, #7
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	3308      	adds	r3, #8
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3a:	4433      	add	r3, r6
 8005a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3e:	e768      	b.n	8005912 <_svfiprintf_r+0x4e>
 8005a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a44:	460c      	mov	r4, r1
 8005a46:	2001      	movs	r0, #1
 8005a48:	e7a6      	b.n	8005998 <_svfiprintf_r+0xd4>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	3401      	adds	r4, #1
 8005a4e:	9305      	str	r3, [sp, #20]
 8005a50:	4619      	mov	r1, r3
 8005a52:	f04f 0c0a 	mov.w	ip, #10
 8005a56:	4620      	mov	r0, r4
 8005a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a5c:	3a30      	subs	r2, #48	; 0x30
 8005a5e:	2a09      	cmp	r2, #9
 8005a60:	d903      	bls.n	8005a6a <_svfiprintf_r+0x1a6>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0c6      	beq.n	80059f4 <_svfiprintf_r+0x130>
 8005a66:	9105      	str	r1, [sp, #20]
 8005a68:	e7c4      	b.n	80059f4 <_svfiprintf_r+0x130>
 8005a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a6e:	4604      	mov	r4, r0
 8005a70:	2301      	movs	r3, #1
 8005a72:	e7f0      	b.n	8005a56 <_svfiprintf_r+0x192>
 8005a74:	ab03      	add	r3, sp, #12
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <_svfiprintf_r+0x1f4>)
 8005a7c:	a904      	add	r1, sp, #16
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f3af 8000 	nop.w
 8005a84:	1c42      	adds	r2, r0, #1
 8005a86:	4606      	mov	r6, r0
 8005a88:	d1d6      	bne.n	8005a38 <_svfiprintf_r+0x174>
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	065b      	lsls	r3, r3, #25
 8005a8e:	f53f af2d 	bmi.w	80058ec <_svfiprintf_r+0x28>
 8005a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a94:	b01d      	add	sp, #116	; 0x74
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	ab03      	add	r3, sp, #12
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <_svfiprintf_r+0x1f4>)
 8005aa2:	a904      	add	r1, sp, #16
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f000 f921 	bl	8005cec <_printf_i>
 8005aaa:	e7eb      	b.n	8005a84 <_svfiprintf_r+0x1c0>
 8005aac:	080069c3 	.word	0x080069c3
 8005ab0:	080069cd 	.word	0x080069cd
 8005ab4:	00000000 	.word	0x00000000
 8005ab8:	08005811 	.word	0x08005811
 8005abc:	080069c9 	.word	0x080069c9

08005ac0 <malloc>:
 8005ac0:	4b02      	ldr	r3, [pc, #8]	; (8005acc <malloc+0xc>)
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	f000 b823 	b.w	8005b10 <_malloc_r>
 8005aca:	bf00      	nop
 8005acc:	20000064 	.word	0x20000064

08005ad0 <sbrk_aligned>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4e0e      	ldr	r6, [pc, #56]	; (8005b0c <sbrk_aligned+0x3c>)
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	6831      	ldr	r1, [r6, #0]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	b911      	cbnz	r1, 8005ae2 <sbrk_aligned+0x12>
 8005adc:	f000 fbb6 	bl	800624c <_sbrk_r>
 8005ae0:	6030      	str	r0, [r6, #0]
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 fbb1 	bl	800624c <_sbrk_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d00a      	beq.n	8005b04 <sbrk_aligned+0x34>
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d007      	beq.n	8005b08 <sbrk_aligned+0x38>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 fba6 	bl	800624c <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d101      	bne.n	8005b08 <sbrk_aligned+0x38>
 8005b04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b08:	4620      	mov	r0, r4
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	2000036c 	.word	0x2000036c

08005b10 <_malloc_r>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4607      	mov	r7, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d905      	bls.n	8005b38 <_malloc_r+0x28>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	2600      	movs	r6, #0
 8005b32:	4630      	mov	r0, r6
 8005b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c0c <_malloc_r+0xfc>
 8005b3c:	f000 faa6 	bl	800608c <__malloc_lock>
 8005b40:	f8d8 3000 	ldr.w	r3, [r8]
 8005b44:	461c      	mov	r4, r3
 8005b46:	bb5c      	cbnz	r4, 8005ba0 <_malloc_r+0x90>
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7ff ffc0 	bl	8005ad0 <sbrk_aligned>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	4604      	mov	r4, r0
 8005b54:	d155      	bne.n	8005c02 <_malloc_r+0xf2>
 8005b56:	f8d8 4000 	ldr.w	r4, [r8]
 8005b5a:	4626      	mov	r6, r4
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	d145      	bne.n	8005bec <_malloc_r+0xdc>
 8005b60:	2c00      	cmp	r4, #0
 8005b62:	d048      	beq.n	8005bf6 <_malloc_r+0xe6>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	4631      	mov	r1, r6
 8005b68:	4638      	mov	r0, r7
 8005b6a:	eb04 0903 	add.w	r9, r4, r3
 8005b6e:	f000 fb6d 	bl	800624c <_sbrk_r>
 8005b72:	4581      	cmp	r9, r0
 8005b74:	d13f      	bne.n	8005bf6 <_malloc_r+0xe6>
 8005b76:	6821      	ldr	r1, [r4, #0]
 8005b78:	1a6d      	subs	r5, r5, r1
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ffa7 	bl	8005ad0 <sbrk_aligned>
 8005b82:	3001      	adds	r0, #1
 8005b84:	d037      	beq.n	8005bf6 <_malloc_r+0xe6>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	442b      	add	r3, r5
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d038      	beq.n	8005c06 <_malloc_r+0xf6>
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	42a2      	cmp	r2, r4
 8005b98:	d12b      	bne.n	8005bf2 <_malloc_r+0xe2>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	e00f      	b.n	8005bc0 <_malloc_r+0xb0>
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	1b52      	subs	r2, r2, r5
 8005ba4:	d41f      	bmi.n	8005be6 <_malloc_r+0xd6>
 8005ba6:	2a0b      	cmp	r2, #11
 8005ba8:	d917      	bls.n	8005bda <_malloc_r+0xca>
 8005baa:	1961      	adds	r1, r4, r5
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	6025      	str	r5, [r4, #0]
 8005bb0:	bf18      	it	ne
 8005bb2:	6059      	strne	r1, [r3, #4]
 8005bb4:	6863      	ldr	r3, [r4, #4]
 8005bb6:	bf08      	it	eq
 8005bb8:	f8c8 1000 	streq.w	r1, [r8]
 8005bbc:	5162      	str	r2, [r4, r5]
 8005bbe:	604b      	str	r3, [r1, #4]
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f104 060b 	add.w	r6, r4, #11
 8005bc6:	f000 fa67 	bl	8006098 <__malloc_unlock>
 8005bca:	f026 0607 	bic.w	r6, r6, #7
 8005bce:	1d23      	adds	r3, r4, #4
 8005bd0:	1af2      	subs	r2, r6, r3
 8005bd2:	d0ae      	beq.n	8005b32 <_malloc_r+0x22>
 8005bd4:	1b9b      	subs	r3, r3, r6
 8005bd6:	50a3      	str	r3, [r4, r2]
 8005bd8:	e7ab      	b.n	8005b32 <_malloc_r+0x22>
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	6862      	ldr	r2, [r4, #4]
 8005bde:	d1dd      	bne.n	8005b9c <_malloc_r+0x8c>
 8005be0:	f8c8 2000 	str.w	r2, [r8]
 8005be4:	e7ec      	b.n	8005bc0 <_malloc_r+0xb0>
 8005be6:	4623      	mov	r3, r4
 8005be8:	6864      	ldr	r4, [r4, #4]
 8005bea:	e7ac      	b.n	8005b46 <_malloc_r+0x36>
 8005bec:	4634      	mov	r4, r6
 8005bee:	6876      	ldr	r6, [r6, #4]
 8005bf0:	e7b4      	b.n	8005b5c <_malloc_r+0x4c>
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	e7cc      	b.n	8005b90 <_malloc_r+0x80>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f000 fa4c 	bl	8006098 <__malloc_unlock>
 8005c00:	e797      	b.n	8005b32 <_malloc_r+0x22>
 8005c02:	6025      	str	r5, [r4, #0]
 8005c04:	e7dc      	b.n	8005bc0 <_malloc_r+0xb0>
 8005c06:	605b      	str	r3, [r3, #4]
 8005c08:	deff      	udf	#255	; 0xff
 8005c0a:	bf00      	nop
 8005c0c:	20000368 	.word	0x20000368

08005c10 <_printf_common>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	4616      	mov	r6, r2
 8005c16:	4699      	mov	r9, r3
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bfb8      	it	lt
 8005c24:	4613      	movlt	r3, r2
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	b10a      	cbz	r2, 8005c36 <_printf_common+0x26>
 8005c32:	3301      	adds	r3, #1
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	bf42      	ittt	mi
 8005c3c:	6833      	ldrmi	r3, [r6, #0]
 8005c3e:	3302      	addmi	r3, #2
 8005c40:	6033      	strmi	r3, [r6, #0]
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	f015 0506 	ands.w	r5, r5, #6
 8005c48:	d106      	bne.n	8005c58 <_printf_common+0x48>
 8005c4a:	f104 0a19 	add.w	sl, r4, #25
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	6832      	ldr	r2, [r6, #0]
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	dc26      	bgt.n	8005ca6 <_printf_common+0x96>
 8005c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c5c:	1e13      	subs	r3, r2, #0
 8005c5e:	6822      	ldr	r2, [r4, #0]
 8005c60:	bf18      	it	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	0692      	lsls	r2, r2, #26
 8005c66:	d42b      	bmi.n	8005cc0 <_printf_common+0xb0>
 8005c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d01e      	beq.n	8005cb4 <_printf_common+0xa4>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	6922      	ldr	r2, [r4, #16]
 8005c7a:	f003 0306 	and.w	r3, r3, #6
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	bf02      	ittt	eq
 8005c82:	68e5      	ldreq	r5, [r4, #12]
 8005c84:	6833      	ldreq	r3, [r6, #0]
 8005c86:	1aed      	subeq	r5, r5, r3
 8005c88:	68a3      	ldr	r3, [r4, #8]
 8005c8a:	bf0c      	ite	eq
 8005c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c90:	2500      	movne	r5, #0
 8005c92:	4293      	cmp	r3, r2
 8005c94:	bfc4      	itt	gt
 8005c96:	1a9b      	subgt	r3, r3, r2
 8005c98:	18ed      	addgt	r5, r5, r3
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	341a      	adds	r4, #26
 8005c9e:	42b5      	cmp	r5, r6
 8005ca0:	d11a      	bne.n	8005cd8 <_printf_common+0xc8>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e008      	b.n	8005cb8 <_printf_common+0xa8>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4649      	mov	r1, r9
 8005cac:	4638      	mov	r0, r7
 8005cae:	47c0      	blx	r8
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d103      	bne.n	8005cbc <_printf_common+0xac>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	e7c6      	b.n	8005c4e <_printf_common+0x3e>
 8005cc0:	18e1      	adds	r1, r4, r3
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	2030      	movs	r0, #48	; 0x30
 8005cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cca:	4422      	add	r2, r4
 8005ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	e7c7      	b.n	8005c68 <_printf_common+0x58>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d0e6      	beq.n	8005cb4 <_printf_common+0xa4>
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7d9      	b.n	8005c9e <_printf_common+0x8e>
	...

08005cec <_printf_i>:
 8005cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	7e0f      	ldrb	r7, [r1, #24]
 8005cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cf4:	2f78      	cmp	r7, #120	; 0x78
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	469a      	mov	sl, r3
 8005cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d02:	d807      	bhi.n	8005d14 <_printf_i+0x28>
 8005d04:	2f62      	cmp	r7, #98	; 0x62
 8005d06:	d80a      	bhi.n	8005d1e <_printf_i+0x32>
 8005d08:	2f00      	cmp	r7, #0
 8005d0a:	f000 80d4 	beq.w	8005eb6 <_printf_i+0x1ca>
 8005d0e:	2f58      	cmp	r7, #88	; 0x58
 8005d10:	f000 80c0 	beq.w	8005e94 <_printf_i+0x1a8>
 8005d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d1c:	e03a      	b.n	8005d94 <_printf_i+0xa8>
 8005d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d22:	2b15      	cmp	r3, #21
 8005d24:	d8f6      	bhi.n	8005d14 <_printf_i+0x28>
 8005d26:	a101      	add	r1, pc, #4	; (adr r1, 8005d2c <_printf_i+0x40>)
 8005d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d15 	.word	0x08005d15
 8005d38:	08005d15 	.word	0x08005d15
 8005d3c:	08005d15 	.word	0x08005d15
 8005d40:	08005d15 	.word	0x08005d15
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d15 	.word	0x08005d15
 8005d4c:	08005d15 	.word	0x08005d15
 8005d50:	08005d15 	.word	0x08005d15
 8005d54:	08005d15 	.word	0x08005d15
 8005d58:	08005e9d 	.word	0x08005e9d
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005e57 	.word	0x08005e57
 8005d64:	08005d15 	.word	0x08005d15
 8005d68:	08005d15 	.word	0x08005d15
 8005d6c:	08005ebf 	.word	0x08005ebf
 8005d70:	08005d15 	.word	0x08005d15
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	08005d15 	.word	0x08005d15
 8005d7c:	08005d15 	.word	0x08005d15
 8005d80:	08005e5f 	.word	0x08005e5f
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	602a      	str	r2, [r5, #0]
 8005d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d94:	2301      	movs	r3, #1
 8005d96:	e09f      	b.n	8005ed8 <_printf_i+0x1ec>
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	0607      	lsls	r7, r0, #24
 8005d9e:	f103 0104 	add.w	r1, r3, #4
 8005da2:	6029      	str	r1, [r5, #0]
 8005da4:	d501      	bpl.n	8005daa <_printf_i+0xbe>
 8005da6:	681e      	ldr	r6, [r3, #0]
 8005da8:	e003      	b.n	8005db2 <_printf_i+0xc6>
 8005daa:	0646      	lsls	r6, r0, #25
 8005dac:	d5fb      	bpl.n	8005da6 <_printf_i+0xba>
 8005dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	da03      	bge.n	8005dbe <_printf_i+0xd2>
 8005db6:	232d      	movs	r3, #45	; 0x2d
 8005db8:	4276      	negs	r6, r6
 8005dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbe:	485a      	ldr	r0, [pc, #360]	; (8005f28 <_printf_i+0x23c>)
 8005dc0:	230a      	movs	r3, #10
 8005dc2:	e012      	b.n	8005dea <_printf_i+0xfe>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	1d19      	adds	r1, r3, #4
 8005dca:	6029      	str	r1, [r5, #0]
 8005dcc:	0605      	lsls	r5, r0, #24
 8005dce:	d501      	bpl.n	8005dd4 <_printf_i+0xe8>
 8005dd0:	681e      	ldr	r6, [r3, #0]
 8005dd2:	e002      	b.n	8005dda <_printf_i+0xee>
 8005dd4:	0641      	lsls	r1, r0, #25
 8005dd6:	d5fb      	bpl.n	8005dd0 <_printf_i+0xe4>
 8005dd8:	881e      	ldrh	r6, [r3, #0]
 8005dda:	4853      	ldr	r0, [pc, #332]	; (8005f28 <_printf_i+0x23c>)
 8005ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8005dde:	bf0c      	ite	eq
 8005de0:	2308      	moveq	r3, #8
 8005de2:	230a      	movne	r3, #10
 8005de4:	2100      	movs	r1, #0
 8005de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dea:	6865      	ldr	r5, [r4, #4]
 8005dec:	60a5      	str	r5, [r4, #8]
 8005dee:	2d00      	cmp	r5, #0
 8005df0:	bfa2      	ittt	ge
 8005df2:	6821      	ldrge	r1, [r4, #0]
 8005df4:	f021 0104 	bicge.w	r1, r1, #4
 8005df8:	6021      	strge	r1, [r4, #0]
 8005dfa:	b90e      	cbnz	r6, 8005e00 <_printf_i+0x114>
 8005dfc:	2d00      	cmp	r5, #0
 8005dfe:	d04b      	beq.n	8005e98 <_printf_i+0x1ac>
 8005e00:	4615      	mov	r5, r2
 8005e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e06:	fb03 6711 	mls	r7, r3, r1, r6
 8005e0a:	5dc7      	ldrb	r7, [r0, r7]
 8005e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e10:	4637      	mov	r7, r6
 8005e12:	42bb      	cmp	r3, r7
 8005e14:	460e      	mov	r6, r1
 8005e16:	d9f4      	bls.n	8005e02 <_printf_i+0x116>
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d10b      	bne.n	8005e34 <_printf_i+0x148>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	07de      	lsls	r6, r3, #31
 8005e20:	d508      	bpl.n	8005e34 <_printf_i+0x148>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	6861      	ldr	r1, [r4, #4]
 8005e26:	4299      	cmp	r1, r3
 8005e28:	bfde      	ittt	le
 8005e2a:	2330      	movle	r3, #48	; 0x30
 8005e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e34:	1b52      	subs	r2, r2, r5
 8005e36:	6122      	str	r2, [r4, #16]
 8005e38:	f8cd a000 	str.w	sl, [sp]
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	aa03      	add	r2, sp, #12
 8005e40:	4621      	mov	r1, r4
 8005e42:	4640      	mov	r0, r8
 8005e44:	f7ff fee4 	bl	8005c10 <_printf_common>
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d14a      	bne.n	8005ee2 <_printf_i+0x1f6>
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e50:	b004      	add	sp, #16
 8005e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	f043 0320 	orr.w	r3, r3, #32
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	4833      	ldr	r0, [pc, #204]	; (8005f2c <_printf_i+0x240>)
 8005e60:	2778      	movs	r7, #120	; 0x78
 8005e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	6829      	ldr	r1, [r5, #0]
 8005e6a:	061f      	lsls	r7, r3, #24
 8005e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e70:	d402      	bmi.n	8005e78 <_printf_i+0x18c>
 8005e72:	065f      	lsls	r7, r3, #25
 8005e74:	bf48      	it	mi
 8005e76:	b2b6      	uxthmi	r6, r6
 8005e78:	07df      	lsls	r7, r3, #31
 8005e7a:	bf48      	it	mi
 8005e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e80:	6029      	str	r1, [r5, #0]
 8005e82:	bf48      	it	mi
 8005e84:	6023      	strmi	r3, [r4, #0]
 8005e86:	b91e      	cbnz	r6, 8005e90 <_printf_i+0x1a4>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	f023 0320 	bic.w	r3, r3, #32
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	2310      	movs	r3, #16
 8005e92:	e7a7      	b.n	8005de4 <_printf_i+0xf8>
 8005e94:	4824      	ldr	r0, [pc, #144]	; (8005f28 <_printf_i+0x23c>)
 8005e96:	e7e4      	b.n	8005e62 <_printf_i+0x176>
 8005e98:	4615      	mov	r5, r2
 8005e9a:	e7bd      	b.n	8005e18 <_printf_i+0x12c>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	6826      	ldr	r6, [r4, #0]
 8005ea0:	6961      	ldr	r1, [r4, #20]
 8005ea2:	1d18      	adds	r0, r3, #4
 8005ea4:	6028      	str	r0, [r5, #0]
 8005ea6:	0635      	lsls	r5, r6, #24
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_i+0x1c4>
 8005eac:	6019      	str	r1, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <_printf_i+0x1ca>
 8005eb0:	0670      	lsls	r0, r6, #25
 8005eb2:	d5fb      	bpl.n	8005eac <_printf_i+0x1c0>
 8005eb4:	8019      	strh	r1, [r3, #0]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	4615      	mov	r5, r2
 8005ebc:	e7bc      	b.n	8005e38 <_printf_i+0x14c>
 8005ebe:	682b      	ldr	r3, [r5, #0]
 8005ec0:	1d1a      	adds	r2, r3, #4
 8005ec2:	602a      	str	r2, [r5, #0]
 8005ec4:	681d      	ldr	r5, [r3, #0]
 8005ec6:	6862      	ldr	r2, [r4, #4]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7fa f990 	bl	80001f0 <memchr>
 8005ed0:	b108      	cbz	r0, 8005ed6 <_printf_i+0x1ea>
 8005ed2:	1b40      	subs	r0, r0, r5
 8005ed4:	6060      	str	r0, [r4, #4]
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	6123      	str	r3, [r4, #16]
 8005eda:	2300      	movs	r3, #0
 8005edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee0:	e7aa      	b.n	8005e38 <_printf_i+0x14c>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	462a      	mov	r2, r5
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	4640      	mov	r0, r8
 8005eea:	47d0      	blx	sl
 8005eec:	3001      	adds	r0, #1
 8005eee:	d0ad      	beq.n	8005e4c <_printf_i+0x160>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	079b      	lsls	r3, r3, #30
 8005ef4:	d413      	bmi.n	8005f1e <_printf_i+0x232>
 8005ef6:	68e0      	ldr	r0, [r4, #12]
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	4298      	cmp	r0, r3
 8005efc:	bfb8      	it	lt
 8005efe:	4618      	movlt	r0, r3
 8005f00:	e7a6      	b.n	8005e50 <_printf_i+0x164>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4632      	mov	r2, r6
 8005f06:	4649      	mov	r1, r9
 8005f08:	4640      	mov	r0, r8
 8005f0a:	47d0      	blx	sl
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d09d      	beq.n	8005e4c <_printf_i+0x160>
 8005f10:	3501      	adds	r5, #1
 8005f12:	68e3      	ldr	r3, [r4, #12]
 8005f14:	9903      	ldr	r1, [sp, #12]
 8005f16:	1a5b      	subs	r3, r3, r1
 8005f18:	42ab      	cmp	r3, r5
 8005f1a:	dcf2      	bgt.n	8005f02 <_printf_i+0x216>
 8005f1c:	e7eb      	b.n	8005ef6 <_printf_i+0x20a>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	f104 0619 	add.w	r6, r4, #25
 8005f24:	e7f5      	b.n	8005f12 <_printf_i+0x226>
 8005f26:	bf00      	nop
 8005f28:	080069d4 	.word	0x080069d4
 8005f2c:	080069e5 	.word	0x080069e5

08005f30 <__sflush_r>:
 8005f30:	898a      	ldrh	r2, [r1, #12]
 8005f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f36:	4605      	mov	r5, r0
 8005f38:	0710      	lsls	r0, r2, #28
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	d458      	bmi.n	8005ff0 <__sflush_r+0xc0>
 8005f3e:	684b      	ldr	r3, [r1, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dc05      	bgt.n	8005f50 <__sflush_r+0x20>
 8005f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dc02      	bgt.n	8005f50 <__sflush_r+0x20>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	d0f9      	beq.n	8005f4a <__sflush_r+0x1a>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f5c:	682f      	ldr	r7, [r5, #0]
 8005f5e:	6a21      	ldr	r1, [r4, #32]
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	d032      	beq.n	8005fca <__sflush_r+0x9a>
 8005f64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	075a      	lsls	r2, r3, #29
 8005f6a:	d505      	bpl.n	8005f78 <__sflush_r+0x48>
 8005f6c:	6863      	ldr	r3, [r4, #4]
 8005f6e:	1ac0      	subs	r0, r0, r3
 8005f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f72:	b10b      	cbz	r3, 8005f78 <__sflush_r+0x48>
 8005f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f76:	1ac0      	subs	r0, r0, r3
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f7e:	6a21      	ldr	r1, [r4, #32]
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b0      	blx	r6
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	d106      	bne.n	8005f98 <__sflush_r+0x68>
 8005f8a:	6829      	ldr	r1, [r5, #0]
 8005f8c:	291d      	cmp	r1, #29
 8005f8e:	d82b      	bhi.n	8005fe8 <__sflush_r+0xb8>
 8005f90:	4a29      	ldr	r2, [pc, #164]	; (8006038 <__sflush_r+0x108>)
 8005f92:	410a      	asrs	r2, r1
 8005f94:	07d6      	lsls	r6, r2, #31
 8005f96:	d427      	bmi.n	8005fe8 <__sflush_r+0xb8>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	6062      	str	r2, [r4, #4]
 8005f9c:	04d9      	lsls	r1, r3, #19
 8005f9e:	6922      	ldr	r2, [r4, #16]
 8005fa0:	6022      	str	r2, [r4, #0]
 8005fa2:	d504      	bpl.n	8005fae <__sflush_r+0x7e>
 8005fa4:	1c42      	adds	r2, r0, #1
 8005fa6:	d101      	bne.n	8005fac <__sflush_r+0x7c>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b903      	cbnz	r3, 8005fae <__sflush_r+0x7e>
 8005fac:	6560      	str	r0, [r4, #84]	; 0x54
 8005fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb0:	602f      	str	r7, [r5, #0]
 8005fb2:	2900      	cmp	r1, #0
 8005fb4:	d0c9      	beq.n	8005f4a <__sflush_r+0x1a>
 8005fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fba:	4299      	cmp	r1, r3
 8005fbc:	d002      	beq.n	8005fc4 <__sflush_r+0x94>
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f000 f97c 	bl	80062bc <_free_r>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	6360      	str	r0, [r4, #52]	; 0x34
 8005fc8:	e7c0      	b.n	8005f4c <__sflush_r+0x1c>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b0      	blx	r6
 8005fd0:	1c41      	adds	r1, r0, #1
 8005fd2:	d1c8      	bne.n	8005f66 <__sflush_r+0x36>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0c5      	beq.n	8005f66 <__sflush_r+0x36>
 8005fda:	2b1d      	cmp	r3, #29
 8005fdc:	d001      	beq.n	8005fe2 <__sflush_r+0xb2>
 8005fde:	2b16      	cmp	r3, #22
 8005fe0:	d101      	bne.n	8005fe6 <__sflush_r+0xb6>
 8005fe2:	602f      	str	r7, [r5, #0]
 8005fe4:	e7b1      	b.n	8005f4a <__sflush_r+0x1a>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	e7ad      	b.n	8005f4c <__sflush_r+0x1c>
 8005ff0:	690f      	ldr	r7, [r1, #16]
 8005ff2:	2f00      	cmp	r7, #0
 8005ff4:	d0a9      	beq.n	8005f4a <__sflush_r+0x1a>
 8005ff6:	0793      	lsls	r3, r2, #30
 8005ff8:	680e      	ldr	r6, [r1, #0]
 8005ffa:	bf08      	it	eq
 8005ffc:	694b      	ldreq	r3, [r1, #20]
 8005ffe:	600f      	str	r7, [r1, #0]
 8006000:	bf18      	it	ne
 8006002:	2300      	movne	r3, #0
 8006004:	eba6 0807 	sub.w	r8, r6, r7
 8006008:	608b      	str	r3, [r1, #8]
 800600a:	f1b8 0f00 	cmp.w	r8, #0
 800600e:	dd9c      	ble.n	8005f4a <__sflush_r+0x1a>
 8006010:	6a21      	ldr	r1, [r4, #32]
 8006012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006014:	4643      	mov	r3, r8
 8006016:	463a      	mov	r2, r7
 8006018:	4628      	mov	r0, r5
 800601a:	47b0      	blx	r6
 800601c:	2800      	cmp	r0, #0
 800601e:	dc06      	bgt.n	800602e <__sflush_r+0xfe>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800602c:	e78e      	b.n	8005f4c <__sflush_r+0x1c>
 800602e:	4407      	add	r7, r0
 8006030:	eba8 0800 	sub.w	r8, r8, r0
 8006034:	e7e9      	b.n	800600a <__sflush_r+0xda>
 8006036:	bf00      	nop
 8006038:	dfbffffe 	.word	0xdfbffffe

0800603c <_fflush_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	690b      	ldr	r3, [r1, #16]
 8006040:	4605      	mov	r5, r0
 8006042:	460c      	mov	r4, r1
 8006044:	b913      	cbnz	r3, 800604c <_fflush_r+0x10>
 8006046:	2500      	movs	r5, #0
 8006048:	4628      	mov	r0, r5
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	b118      	cbz	r0, 8006056 <_fflush_r+0x1a>
 800604e:	6a03      	ldr	r3, [r0, #32]
 8006050:	b90b      	cbnz	r3, 8006056 <_fflush_r+0x1a>
 8006052:	f7ff fb53 	bl	80056fc <__sinit>
 8006056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f3      	beq.n	8006046 <_fflush_r+0xa>
 800605e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006060:	07d0      	lsls	r0, r2, #31
 8006062:	d404      	bmi.n	800606e <_fflush_r+0x32>
 8006064:	0599      	lsls	r1, r3, #22
 8006066:	d402      	bmi.n	800606e <_fflush_r+0x32>
 8006068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800606a:	f7ff fbb0 	bl	80057ce <__retarget_lock_acquire_recursive>
 800606e:	4628      	mov	r0, r5
 8006070:	4621      	mov	r1, r4
 8006072:	f7ff ff5d 	bl	8005f30 <__sflush_r>
 8006076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006078:	07da      	lsls	r2, r3, #31
 800607a:	4605      	mov	r5, r0
 800607c:	d4e4      	bmi.n	8006048 <_fflush_r+0xc>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	059b      	lsls	r3, r3, #22
 8006082:	d4e1      	bmi.n	8006048 <_fflush_r+0xc>
 8006084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006086:	f7ff fba3 	bl	80057d0 <__retarget_lock_release_recursive>
 800608a:	e7dd      	b.n	8006048 <_fflush_r+0xc>

0800608c <__malloc_lock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_lock+0x8>)
 800608e:	f7ff bb9e 	b.w	80057ce <__retarget_lock_acquire_recursive>
 8006092:	bf00      	nop
 8006094:	20000364 	.word	0x20000364

08006098 <__malloc_unlock>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__malloc_unlock+0x8>)
 800609a:	f7ff bb99 	b.w	80057d0 <__retarget_lock_release_recursive>
 800609e:	bf00      	nop
 80060a0:	20000364 	.word	0x20000364

080060a4 <__sread>:
 80060a4:	b510      	push	{r4, lr}
 80060a6:	460c      	mov	r4, r1
 80060a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ac:	f000 f8bc 	bl	8006228 <_read_r>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	bfab      	itete	ge
 80060b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060b6:	89a3      	ldrhlt	r3, [r4, #12]
 80060b8:	181b      	addge	r3, r3, r0
 80060ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060be:	bfac      	ite	ge
 80060c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80060c2:	81a3      	strhlt	r3, [r4, #12]
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <__swrite>:
 80060c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ca:	461f      	mov	r7, r3
 80060cc:	898b      	ldrh	r3, [r1, #12]
 80060ce:	05db      	lsls	r3, r3, #23
 80060d0:	4605      	mov	r5, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	4616      	mov	r6, r2
 80060d6:	d505      	bpl.n	80060e4 <__swrite+0x1e>
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	2302      	movs	r3, #2
 80060de:	2200      	movs	r2, #0
 80060e0:	f000 f890 	bl	8006204 <_lseek_r>
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	4632      	mov	r2, r6
 80060f2:	463b      	mov	r3, r7
 80060f4:	4628      	mov	r0, r5
 80060f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060fa:	f000 b8b7 	b.w	800626c <_write_r>

080060fe <__sseek>:
 80060fe:	b510      	push	{r4, lr}
 8006100:	460c      	mov	r4, r1
 8006102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006106:	f000 f87d 	bl	8006204 <_lseek_r>
 800610a:	1c43      	adds	r3, r0, #1
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	bf15      	itete	ne
 8006110:	6560      	strne	r0, [r4, #84]	; 0x54
 8006112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800611a:	81a3      	strheq	r3, [r4, #12]
 800611c:	bf18      	it	ne
 800611e:	81a3      	strhne	r3, [r4, #12]
 8006120:	bd10      	pop	{r4, pc}

08006122 <__sclose>:
 8006122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006126:	f000 b85d 	b.w	80061e4 <_close_r>
	...

0800612c <fiprintf>:
 800612c:	b40e      	push	{r1, r2, r3}
 800612e:	b503      	push	{r0, r1, lr}
 8006130:	4601      	mov	r1, r0
 8006132:	ab03      	add	r3, sp, #12
 8006134:	4805      	ldr	r0, [pc, #20]	; (800614c <fiprintf+0x20>)
 8006136:	f853 2b04 	ldr.w	r2, [r3], #4
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	f000 f933 	bl	80063a8 <_vfiprintf_r>
 8006142:	b002      	add	sp, #8
 8006144:	f85d eb04 	ldr.w	lr, [sp], #4
 8006148:	b003      	add	sp, #12
 800614a:	4770      	bx	lr
 800614c:	20000064 	.word	0x20000064

08006150 <_realloc_r>:
 8006150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	4680      	mov	r8, r0
 8006156:	4614      	mov	r4, r2
 8006158:	460e      	mov	r6, r1
 800615a:	b921      	cbnz	r1, 8006166 <_realloc_r+0x16>
 800615c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006160:	4611      	mov	r1, r2
 8006162:	f7ff bcd5 	b.w	8005b10 <_malloc_r>
 8006166:	b92a      	cbnz	r2, 8006174 <_realloc_r+0x24>
 8006168:	f000 f8a8 	bl	80062bc <_free_r>
 800616c:	4625      	mov	r5, r4
 800616e:	4628      	mov	r0, r5
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	f000 fa32 	bl	80065dc <_malloc_usable_size_r>
 8006178:	4284      	cmp	r4, r0
 800617a:	4607      	mov	r7, r0
 800617c:	d802      	bhi.n	8006184 <_realloc_r+0x34>
 800617e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006182:	d812      	bhi.n	80061aa <_realloc_r+0x5a>
 8006184:	4621      	mov	r1, r4
 8006186:	4640      	mov	r0, r8
 8006188:	f7ff fcc2 	bl	8005b10 <_malloc_r>
 800618c:	4605      	mov	r5, r0
 800618e:	2800      	cmp	r0, #0
 8006190:	d0ed      	beq.n	800616e <_realloc_r+0x1e>
 8006192:	42bc      	cmp	r4, r7
 8006194:	4622      	mov	r2, r4
 8006196:	4631      	mov	r1, r6
 8006198:	bf28      	it	cs
 800619a:	463a      	movcs	r2, r7
 800619c:	f000 f878 	bl	8006290 <memcpy>
 80061a0:	4631      	mov	r1, r6
 80061a2:	4640      	mov	r0, r8
 80061a4:	f000 f88a 	bl	80062bc <_free_r>
 80061a8:	e7e1      	b.n	800616e <_realloc_r+0x1e>
 80061aa:	4635      	mov	r5, r6
 80061ac:	e7df      	b.n	800616e <_realloc_r+0x1e>

080061ae <memmove>:
 80061ae:	4288      	cmp	r0, r1
 80061b0:	b510      	push	{r4, lr}
 80061b2:	eb01 0402 	add.w	r4, r1, r2
 80061b6:	d902      	bls.n	80061be <memmove+0x10>
 80061b8:	4284      	cmp	r4, r0
 80061ba:	4623      	mov	r3, r4
 80061bc:	d807      	bhi.n	80061ce <memmove+0x20>
 80061be:	1e43      	subs	r3, r0, #1
 80061c0:	42a1      	cmp	r1, r4
 80061c2:	d008      	beq.n	80061d6 <memmove+0x28>
 80061c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061cc:	e7f8      	b.n	80061c0 <memmove+0x12>
 80061ce:	4402      	add	r2, r0
 80061d0:	4601      	mov	r1, r0
 80061d2:	428a      	cmp	r2, r1
 80061d4:	d100      	bne.n	80061d8 <memmove+0x2a>
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061e0:	e7f7      	b.n	80061d2 <memmove+0x24>
	...

080061e4 <_close_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4d06      	ldr	r5, [pc, #24]	; (8006200 <_close_r+0x1c>)
 80061e8:	2300      	movs	r3, #0
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	f7fb faf5 	bl	80017de <_close>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_close_r+0x1a>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_close_r+0x1a>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20000370 	.word	0x20000370

08006204 <_lseek_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d07      	ldr	r5, [pc, #28]	; (8006224 <_lseek_r+0x20>)
 8006208:	4604      	mov	r4, r0
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	2200      	movs	r2, #0
 8006210:	602a      	str	r2, [r5, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f7fb fb0a 	bl	800182c <_lseek>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_lseek_r+0x1e>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_lseek_r+0x1e>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20000370 	.word	0x20000370

08006228 <_read_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d07      	ldr	r5, [pc, #28]	; (8006248 <_read_r+0x20>)
 800622c:	4604      	mov	r4, r0
 800622e:	4608      	mov	r0, r1
 8006230:	4611      	mov	r1, r2
 8006232:	2200      	movs	r2, #0
 8006234:	602a      	str	r2, [r5, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	f7fb fa98 	bl	800176c <_read>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_read_r+0x1e>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_read_r+0x1e>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20000370 	.word	0x20000370

0800624c <_sbrk_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d06      	ldr	r5, [pc, #24]	; (8006268 <_sbrk_r+0x1c>)
 8006250:	2300      	movs	r3, #0
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fb faf6 	bl	8001848 <_sbrk>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_sbrk_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_sbrk_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000370 	.word	0x20000370

0800626c <_write_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d07      	ldr	r5, [pc, #28]	; (800628c <_write_r+0x20>)
 8006270:	4604      	mov	r4, r0
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	2200      	movs	r2, #0
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fb fa93 	bl	80017a6 <_write>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_write_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_write_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	20000370 	.word	0x20000370

08006290 <memcpy>:
 8006290:	440a      	add	r2, r1
 8006292:	4291      	cmp	r1, r2
 8006294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006298:	d100      	bne.n	800629c <memcpy+0xc>
 800629a:	4770      	bx	lr
 800629c:	b510      	push	{r4, lr}
 800629e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062a6:	4291      	cmp	r1, r2
 80062a8:	d1f9      	bne.n	800629e <memcpy+0xe>
 80062aa:	bd10      	pop	{r4, pc}

080062ac <abort>:
 80062ac:	b508      	push	{r3, lr}
 80062ae:	2006      	movs	r0, #6
 80062b0:	f000 fade 	bl	8006870 <raise>
 80062b4:	2001      	movs	r0, #1
 80062b6:	f7fb fa4f 	bl	8001758 <_exit>
	...

080062bc <_free_r>:
 80062bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062be:	2900      	cmp	r1, #0
 80062c0:	d044      	beq.n	800634c <_free_r+0x90>
 80062c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c6:	9001      	str	r0, [sp, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f1a1 0404 	sub.w	r4, r1, #4
 80062ce:	bfb8      	it	lt
 80062d0:	18e4      	addlt	r4, r4, r3
 80062d2:	f7ff fedb 	bl	800608c <__malloc_lock>
 80062d6:	4a1e      	ldr	r2, [pc, #120]	; (8006350 <_free_r+0x94>)
 80062d8:	9801      	ldr	r0, [sp, #4]
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	b933      	cbnz	r3, 80062ec <_free_r+0x30>
 80062de:	6063      	str	r3, [r4, #4]
 80062e0:	6014      	str	r4, [r2, #0]
 80062e2:	b003      	add	sp, #12
 80062e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062e8:	f7ff bed6 	b.w	8006098 <__malloc_unlock>
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	d908      	bls.n	8006302 <_free_r+0x46>
 80062f0:	6825      	ldr	r5, [r4, #0]
 80062f2:	1961      	adds	r1, r4, r5
 80062f4:	428b      	cmp	r3, r1
 80062f6:	bf01      	itttt	eq
 80062f8:	6819      	ldreq	r1, [r3, #0]
 80062fa:	685b      	ldreq	r3, [r3, #4]
 80062fc:	1949      	addeq	r1, r1, r5
 80062fe:	6021      	streq	r1, [r4, #0]
 8006300:	e7ed      	b.n	80062de <_free_r+0x22>
 8006302:	461a      	mov	r2, r3
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	b10b      	cbz	r3, 800630c <_free_r+0x50>
 8006308:	42a3      	cmp	r3, r4
 800630a:	d9fa      	bls.n	8006302 <_free_r+0x46>
 800630c:	6811      	ldr	r1, [r2, #0]
 800630e:	1855      	adds	r5, r2, r1
 8006310:	42a5      	cmp	r5, r4
 8006312:	d10b      	bne.n	800632c <_free_r+0x70>
 8006314:	6824      	ldr	r4, [r4, #0]
 8006316:	4421      	add	r1, r4
 8006318:	1854      	adds	r4, r2, r1
 800631a:	42a3      	cmp	r3, r4
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	d1e0      	bne.n	80062e2 <_free_r+0x26>
 8006320:	681c      	ldr	r4, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	6053      	str	r3, [r2, #4]
 8006326:	440c      	add	r4, r1
 8006328:	6014      	str	r4, [r2, #0]
 800632a:	e7da      	b.n	80062e2 <_free_r+0x26>
 800632c:	d902      	bls.n	8006334 <_free_r+0x78>
 800632e:	230c      	movs	r3, #12
 8006330:	6003      	str	r3, [r0, #0]
 8006332:	e7d6      	b.n	80062e2 <_free_r+0x26>
 8006334:	6825      	ldr	r5, [r4, #0]
 8006336:	1961      	adds	r1, r4, r5
 8006338:	428b      	cmp	r3, r1
 800633a:	bf04      	itt	eq
 800633c:	6819      	ldreq	r1, [r3, #0]
 800633e:	685b      	ldreq	r3, [r3, #4]
 8006340:	6063      	str	r3, [r4, #4]
 8006342:	bf04      	itt	eq
 8006344:	1949      	addeq	r1, r1, r5
 8006346:	6021      	streq	r1, [r4, #0]
 8006348:	6054      	str	r4, [r2, #4]
 800634a:	e7ca      	b.n	80062e2 <_free_r+0x26>
 800634c:	b003      	add	sp, #12
 800634e:	bd30      	pop	{r4, r5, pc}
 8006350:	20000368 	.word	0x20000368

08006354 <__sfputc_r>:
 8006354:	6893      	ldr	r3, [r2, #8]
 8006356:	3b01      	subs	r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	b410      	push	{r4}
 800635c:	6093      	str	r3, [r2, #8]
 800635e:	da08      	bge.n	8006372 <__sfputc_r+0x1e>
 8006360:	6994      	ldr	r4, [r2, #24]
 8006362:	42a3      	cmp	r3, r4
 8006364:	db01      	blt.n	800636a <__sfputc_r+0x16>
 8006366:	290a      	cmp	r1, #10
 8006368:	d103      	bne.n	8006372 <__sfputc_r+0x1e>
 800636a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800636e:	f000 b93d 	b.w	80065ec <__swbuf_r>
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	1c58      	adds	r0, r3, #1
 8006376:	6010      	str	r0, [r2, #0]
 8006378:	7019      	strb	r1, [r3, #0]
 800637a:	4608      	mov	r0, r1
 800637c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006380:	4770      	bx	lr

08006382 <__sfputs_r>:
 8006382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006384:	4606      	mov	r6, r0
 8006386:	460f      	mov	r7, r1
 8006388:	4614      	mov	r4, r2
 800638a:	18d5      	adds	r5, r2, r3
 800638c:	42ac      	cmp	r4, r5
 800638e:	d101      	bne.n	8006394 <__sfputs_r+0x12>
 8006390:	2000      	movs	r0, #0
 8006392:	e007      	b.n	80063a4 <__sfputs_r+0x22>
 8006394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006398:	463a      	mov	r2, r7
 800639a:	4630      	mov	r0, r6
 800639c:	f7ff ffda 	bl	8006354 <__sfputc_r>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d1f3      	bne.n	800638c <__sfputs_r+0xa>
 80063a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063a8 <_vfiprintf_r>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	460d      	mov	r5, r1
 80063ae:	b09d      	sub	sp, #116	; 0x74
 80063b0:	4614      	mov	r4, r2
 80063b2:	4698      	mov	r8, r3
 80063b4:	4606      	mov	r6, r0
 80063b6:	b118      	cbz	r0, 80063c0 <_vfiprintf_r+0x18>
 80063b8:	6a03      	ldr	r3, [r0, #32]
 80063ba:	b90b      	cbnz	r3, 80063c0 <_vfiprintf_r+0x18>
 80063bc:	f7ff f99e 	bl	80056fc <__sinit>
 80063c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063c2:	07d9      	lsls	r1, r3, #31
 80063c4:	d405      	bmi.n	80063d2 <_vfiprintf_r+0x2a>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	059a      	lsls	r2, r3, #22
 80063ca:	d402      	bmi.n	80063d2 <_vfiprintf_r+0x2a>
 80063cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ce:	f7ff f9fe 	bl	80057ce <__retarget_lock_acquire_recursive>
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	071b      	lsls	r3, r3, #28
 80063d6:	d501      	bpl.n	80063dc <_vfiprintf_r+0x34>
 80063d8:	692b      	ldr	r3, [r5, #16]
 80063da:	b99b      	cbnz	r3, 8006404 <_vfiprintf_r+0x5c>
 80063dc:	4629      	mov	r1, r5
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 f942 	bl	8006668 <__swsetup_r>
 80063e4:	b170      	cbz	r0, 8006404 <_vfiprintf_r+0x5c>
 80063e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e8:	07dc      	lsls	r4, r3, #31
 80063ea:	d504      	bpl.n	80063f6 <_vfiprintf_r+0x4e>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f0:	b01d      	add	sp, #116	; 0x74
 80063f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	0598      	lsls	r0, r3, #22
 80063fa:	d4f7      	bmi.n	80063ec <_vfiprintf_r+0x44>
 80063fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063fe:	f7ff f9e7 	bl	80057d0 <__retarget_lock_release_recursive>
 8006402:	e7f3      	b.n	80063ec <_vfiprintf_r+0x44>
 8006404:	2300      	movs	r3, #0
 8006406:	9309      	str	r3, [sp, #36]	; 0x24
 8006408:	2320      	movs	r3, #32
 800640a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800640e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006412:	2330      	movs	r3, #48	; 0x30
 8006414:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80065c8 <_vfiprintf_r+0x220>
 8006418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800641c:	f04f 0901 	mov.w	r9, #1
 8006420:	4623      	mov	r3, r4
 8006422:	469a      	mov	sl, r3
 8006424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006428:	b10a      	cbz	r2, 800642e <_vfiprintf_r+0x86>
 800642a:	2a25      	cmp	r2, #37	; 0x25
 800642c:	d1f9      	bne.n	8006422 <_vfiprintf_r+0x7a>
 800642e:	ebba 0b04 	subs.w	fp, sl, r4
 8006432:	d00b      	beq.n	800644c <_vfiprintf_r+0xa4>
 8006434:	465b      	mov	r3, fp
 8006436:	4622      	mov	r2, r4
 8006438:	4629      	mov	r1, r5
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff ffa1 	bl	8006382 <__sfputs_r>
 8006440:	3001      	adds	r0, #1
 8006442:	f000 80a9 	beq.w	8006598 <_vfiprintf_r+0x1f0>
 8006446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006448:	445a      	add	r2, fp
 800644a:	9209      	str	r2, [sp, #36]	; 0x24
 800644c:	f89a 3000 	ldrb.w	r3, [sl]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80a1 	beq.w	8006598 <_vfiprintf_r+0x1f0>
 8006456:	2300      	movs	r3, #0
 8006458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800645c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006460:	f10a 0a01 	add.w	sl, sl, #1
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	9307      	str	r3, [sp, #28]
 8006468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800646c:	931a      	str	r3, [sp, #104]	; 0x68
 800646e:	4654      	mov	r4, sl
 8006470:	2205      	movs	r2, #5
 8006472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006476:	4854      	ldr	r0, [pc, #336]	; (80065c8 <_vfiprintf_r+0x220>)
 8006478:	f7f9 feba 	bl	80001f0 <memchr>
 800647c:	9a04      	ldr	r2, [sp, #16]
 800647e:	b9d8      	cbnz	r0, 80064b8 <_vfiprintf_r+0x110>
 8006480:	06d1      	lsls	r1, r2, #27
 8006482:	bf44      	itt	mi
 8006484:	2320      	movmi	r3, #32
 8006486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800648a:	0713      	lsls	r3, r2, #28
 800648c:	bf44      	itt	mi
 800648e:	232b      	movmi	r3, #43	; 0x2b
 8006490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006494:	f89a 3000 	ldrb.w	r3, [sl]
 8006498:	2b2a      	cmp	r3, #42	; 0x2a
 800649a:	d015      	beq.n	80064c8 <_vfiprintf_r+0x120>
 800649c:	9a07      	ldr	r2, [sp, #28]
 800649e:	4654      	mov	r4, sl
 80064a0:	2000      	movs	r0, #0
 80064a2:	f04f 0c0a 	mov.w	ip, #10
 80064a6:	4621      	mov	r1, r4
 80064a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ac:	3b30      	subs	r3, #48	; 0x30
 80064ae:	2b09      	cmp	r3, #9
 80064b0:	d94d      	bls.n	800654e <_vfiprintf_r+0x1a6>
 80064b2:	b1b0      	cbz	r0, 80064e2 <_vfiprintf_r+0x13a>
 80064b4:	9207      	str	r2, [sp, #28]
 80064b6:	e014      	b.n	80064e2 <_vfiprintf_r+0x13a>
 80064b8:	eba0 0308 	sub.w	r3, r0, r8
 80064bc:	fa09 f303 	lsl.w	r3, r9, r3
 80064c0:	4313      	orrs	r3, r2
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	46a2      	mov	sl, r4
 80064c6:	e7d2      	b.n	800646e <_vfiprintf_r+0xc6>
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	1d19      	adds	r1, r3, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	9103      	str	r1, [sp, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bfbb      	ittet	lt
 80064d4:	425b      	neglt	r3, r3
 80064d6:	f042 0202 	orrlt.w	r2, r2, #2
 80064da:	9307      	strge	r3, [sp, #28]
 80064dc:	9307      	strlt	r3, [sp, #28]
 80064de:	bfb8      	it	lt
 80064e0:	9204      	strlt	r2, [sp, #16]
 80064e2:	7823      	ldrb	r3, [r4, #0]
 80064e4:	2b2e      	cmp	r3, #46	; 0x2e
 80064e6:	d10c      	bne.n	8006502 <_vfiprintf_r+0x15a>
 80064e8:	7863      	ldrb	r3, [r4, #1]
 80064ea:	2b2a      	cmp	r3, #42	; 0x2a
 80064ec:	d134      	bne.n	8006558 <_vfiprintf_r+0x1b0>
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	1d1a      	adds	r2, r3, #4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	9203      	str	r2, [sp, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bfb8      	it	lt
 80064fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064fe:	3402      	adds	r4, #2
 8006500:	9305      	str	r3, [sp, #20]
 8006502:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80065d8 <_vfiprintf_r+0x230>
 8006506:	7821      	ldrb	r1, [r4, #0]
 8006508:	2203      	movs	r2, #3
 800650a:	4650      	mov	r0, sl
 800650c:	f7f9 fe70 	bl	80001f0 <memchr>
 8006510:	b138      	cbz	r0, 8006522 <_vfiprintf_r+0x17a>
 8006512:	9b04      	ldr	r3, [sp, #16]
 8006514:	eba0 000a 	sub.w	r0, r0, sl
 8006518:	2240      	movs	r2, #64	; 0x40
 800651a:	4082      	lsls	r2, r0
 800651c:	4313      	orrs	r3, r2
 800651e:	3401      	adds	r4, #1
 8006520:	9304      	str	r3, [sp, #16]
 8006522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006526:	4829      	ldr	r0, [pc, #164]	; (80065cc <_vfiprintf_r+0x224>)
 8006528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800652c:	2206      	movs	r2, #6
 800652e:	f7f9 fe5f 	bl	80001f0 <memchr>
 8006532:	2800      	cmp	r0, #0
 8006534:	d03f      	beq.n	80065b6 <_vfiprintf_r+0x20e>
 8006536:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <_vfiprintf_r+0x228>)
 8006538:	bb1b      	cbnz	r3, 8006582 <_vfiprintf_r+0x1da>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	3307      	adds	r3, #7
 800653e:	f023 0307 	bic.w	r3, r3, #7
 8006542:	3308      	adds	r3, #8
 8006544:	9303      	str	r3, [sp, #12]
 8006546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006548:	443b      	add	r3, r7
 800654a:	9309      	str	r3, [sp, #36]	; 0x24
 800654c:	e768      	b.n	8006420 <_vfiprintf_r+0x78>
 800654e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006552:	460c      	mov	r4, r1
 8006554:	2001      	movs	r0, #1
 8006556:	e7a6      	b.n	80064a6 <_vfiprintf_r+0xfe>
 8006558:	2300      	movs	r3, #0
 800655a:	3401      	adds	r4, #1
 800655c:	9305      	str	r3, [sp, #20]
 800655e:	4619      	mov	r1, r3
 8006560:	f04f 0c0a 	mov.w	ip, #10
 8006564:	4620      	mov	r0, r4
 8006566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800656a:	3a30      	subs	r2, #48	; 0x30
 800656c:	2a09      	cmp	r2, #9
 800656e:	d903      	bls.n	8006578 <_vfiprintf_r+0x1d0>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0c6      	beq.n	8006502 <_vfiprintf_r+0x15a>
 8006574:	9105      	str	r1, [sp, #20]
 8006576:	e7c4      	b.n	8006502 <_vfiprintf_r+0x15a>
 8006578:	fb0c 2101 	mla	r1, ip, r1, r2
 800657c:	4604      	mov	r4, r0
 800657e:	2301      	movs	r3, #1
 8006580:	e7f0      	b.n	8006564 <_vfiprintf_r+0x1bc>
 8006582:	ab03      	add	r3, sp, #12
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	462a      	mov	r2, r5
 8006588:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <_vfiprintf_r+0x22c>)
 800658a:	a904      	add	r1, sp, #16
 800658c:	4630      	mov	r0, r6
 800658e:	f3af 8000 	nop.w
 8006592:	4607      	mov	r7, r0
 8006594:	1c78      	adds	r0, r7, #1
 8006596:	d1d6      	bne.n	8006546 <_vfiprintf_r+0x19e>
 8006598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800659a:	07d9      	lsls	r1, r3, #31
 800659c:	d405      	bmi.n	80065aa <_vfiprintf_r+0x202>
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	059a      	lsls	r2, r3, #22
 80065a2:	d402      	bmi.n	80065aa <_vfiprintf_r+0x202>
 80065a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065a6:	f7ff f913 	bl	80057d0 <__retarget_lock_release_recursive>
 80065aa:	89ab      	ldrh	r3, [r5, #12]
 80065ac:	065b      	lsls	r3, r3, #25
 80065ae:	f53f af1d 	bmi.w	80063ec <_vfiprintf_r+0x44>
 80065b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065b4:	e71c      	b.n	80063f0 <_vfiprintf_r+0x48>
 80065b6:	ab03      	add	r3, sp, #12
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	462a      	mov	r2, r5
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <_vfiprintf_r+0x22c>)
 80065be:	a904      	add	r1, sp, #16
 80065c0:	4630      	mov	r0, r6
 80065c2:	f7ff fb93 	bl	8005cec <_printf_i>
 80065c6:	e7e4      	b.n	8006592 <_vfiprintf_r+0x1ea>
 80065c8:	080069c3 	.word	0x080069c3
 80065cc:	080069cd 	.word	0x080069cd
 80065d0:	00000000 	.word	0x00000000
 80065d4:	08006383 	.word	0x08006383
 80065d8:	080069c9 	.word	0x080069c9

080065dc <_malloc_usable_size_r>:
 80065dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e0:	1f18      	subs	r0, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bfbc      	itt	lt
 80065e6:	580b      	ldrlt	r3, [r1, r0]
 80065e8:	18c0      	addlt	r0, r0, r3
 80065ea:	4770      	bx	lr

080065ec <__swbuf_r>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	460e      	mov	r6, r1
 80065f0:	4614      	mov	r4, r2
 80065f2:	4605      	mov	r5, r0
 80065f4:	b118      	cbz	r0, 80065fe <__swbuf_r+0x12>
 80065f6:	6a03      	ldr	r3, [r0, #32]
 80065f8:	b90b      	cbnz	r3, 80065fe <__swbuf_r+0x12>
 80065fa:	f7ff f87f 	bl	80056fc <__sinit>
 80065fe:	69a3      	ldr	r3, [r4, #24]
 8006600:	60a3      	str	r3, [r4, #8]
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	071a      	lsls	r2, r3, #28
 8006606:	d525      	bpl.n	8006654 <__swbuf_r+0x68>
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	b31b      	cbz	r3, 8006654 <__swbuf_r+0x68>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	6922      	ldr	r2, [r4, #16]
 8006610:	1a98      	subs	r0, r3, r2
 8006612:	6963      	ldr	r3, [r4, #20]
 8006614:	b2f6      	uxtb	r6, r6
 8006616:	4283      	cmp	r3, r0
 8006618:	4637      	mov	r7, r6
 800661a:	dc04      	bgt.n	8006626 <__swbuf_r+0x3a>
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f7ff fd0c 	bl	800603c <_fflush_r>
 8006624:	b9e0      	cbnz	r0, 8006660 <__swbuf_r+0x74>
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	3b01      	subs	r3, #1
 800662a:	60a3      	str	r3, [r4, #8]
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	701e      	strb	r6, [r3, #0]
 8006634:	6962      	ldr	r2, [r4, #20]
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	429a      	cmp	r2, r3
 800663a:	d004      	beq.n	8006646 <__swbuf_r+0x5a>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	07db      	lsls	r3, r3, #31
 8006640:	d506      	bpl.n	8006650 <__swbuf_r+0x64>
 8006642:	2e0a      	cmp	r6, #10
 8006644:	d104      	bne.n	8006650 <__swbuf_r+0x64>
 8006646:	4621      	mov	r1, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff fcf7 	bl	800603c <_fflush_r>
 800664e:	b938      	cbnz	r0, 8006660 <__swbuf_r+0x74>
 8006650:	4638      	mov	r0, r7
 8006652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f806 	bl	8006668 <__swsetup_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	d0d5      	beq.n	800660c <__swbuf_r+0x20>
 8006660:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006664:	e7f4      	b.n	8006650 <__swbuf_r+0x64>
	...

08006668 <__swsetup_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4b2a      	ldr	r3, [pc, #168]	; (8006714 <__swsetup_r+0xac>)
 800666c:	4605      	mov	r5, r0
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	460c      	mov	r4, r1
 8006672:	b118      	cbz	r0, 800667c <__swsetup_r+0x14>
 8006674:	6a03      	ldr	r3, [r0, #32]
 8006676:	b90b      	cbnz	r3, 800667c <__swsetup_r+0x14>
 8006678:	f7ff f840 	bl	80056fc <__sinit>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006682:	0718      	lsls	r0, r3, #28
 8006684:	d422      	bmi.n	80066cc <__swsetup_r+0x64>
 8006686:	06d9      	lsls	r1, r3, #27
 8006688:	d407      	bmi.n	800669a <__swsetup_r+0x32>
 800668a:	2309      	movs	r3, #9
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006698:	e034      	b.n	8006704 <__swsetup_r+0x9c>
 800669a:	0758      	lsls	r0, r3, #29
 800669c:	d512      	bpl.n	80066c4 <__swsetup_r+0x5c>
 800669e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a0:	b141      	cbz	r1, 80066b4 <__swsetup_r+0x4c>
 80066a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a6:	4299      	cmp	r1, r3
 80066a8:	d002      	beq.n	80066b0 <__swsetup_r+0x48>
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7ff fe06 	bl	80062bc <_free_r>
 80066b0:	2300      	movs	r3, #0
 80066b2:	6363      	str	r3, [r4, #52]	; 0x34
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	2300      	movs	r3, #0
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f043 0308 	orr.w	r3, r3, #8
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	b94b      	cbnz	r3, 80066e4 <__swsetup_r+0x7c>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066da:	d003      	beq.n	80066e4 <__swsetup_r+0x7c>
 80066dc:	4621      	mov	r1, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 f840 	bl	8006764 <__smakebuf_r>
 80066e4:	89a0      	ldrh	r0, [r4, #12]
 80066e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ea:	f010 0301 	ands.w	r3, r0, #1
 80066ee:	d00a      	beq.n	8006706 <__swsetup_r+0x9e>
 80066f0:	2300      	movs	r3, #0
 80066f2:	60a3      	str	r3, [r4, #8]
 80066f4:	6963      	ldr	r3, [r4, #20]
 80066f6:	425b      	negs	r3, r3
 80066f8:	61a3      	str	r3, [r4, #24]
 80066fa:	6923      	ldr	r3, [r4, #16]
 80066fc:	b943      	cbnz	r3, 8006710 <__swsetup_r+0xa8>
 80066fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006702:	d1c4      	bne.n	800668e <__swsetup_r+0x26>
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	0781      	lsls	r1, r0, #30
 8006708:	bf58      	it	pl
 800670a:	6963      	ldrpl	r3, [r4, #20]
 800670c:	60a3      	str	r3, [r4, #8]
 800670e:	e7f4      	b.n	80066fa <__swsetup_r+0x92>
 8006710:	2000      	movs	r0, #0
 8006712:	e7f7      	b.n	8006704 <__swsetup_r+0x9c>
 8006714:	20000064 	.word	0x20000064

08006718 <__swhatbuf_r>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	460c      	mov	r4, r1
 800671c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006720:	2900      	cmp	r1, #0
 8006722:	b096      	sub	sp, #88	; 0x58
 8006724:	4615      	mov	r5, r2
 8006726:	461e      	mov	r6, r3
 8006728:	da0d      	bge.n	8006746 <__swhatbuf_r+0x2e>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	bf0c      	ite	eq
 8006736:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800673a:	2340      	movne	r3, #64	; 0x40
 800673c:	2000      	movs	r0, #0
 800673e:	6031      	str	r1, [r6, #0]
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	b016      	add	sp, #88	; 0x58
 8006744:	bd70      	pop	{r4, r5, r6, pc}
 8006746:	466a      	mov	r2, sp
 8006748:	f000 f848 	bl	80067dc <_fstat_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	dbec      	blt.n	800672a <__swhatbuf_r+0x12>
 8006750:	9901      	ldr	r1, [sp, #4]
 8006752:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006756:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800675a:	4259      	negs	r1, r3
 800675c:	4159      	adcs	r1, r3
 800675e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006762:	e7eb      	b.n	800673c <__swhatbuf_r+0x24>

08006764 <__smakebuf_r>:
 8006764:	898b      	ldrh	r3, [r1, #12]
 8006766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006768:	079d      	lsls	r5, r3, #30
 800676a:	4606      	mov	r6, r0
 800676c:	460c      	mov	r4, r1
 800676e:	d507      	bpl.n	8006780 <__smakebuf_r+0x1c>
 8006770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	2301      	movs	r3, #1
 800677a:	6163      	str	r3, [r4, #20]
 800677c:	b002      	add	sp, #8
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	ab01      	add	r3, sp, #4
 8006782:	466a      	mov	r2, sp
 8006784:	f7ff ffc8 	bl	8006718 <__swhatbuf_r>
 8006788:	9900      	ldr	r1, [sp, #0]
 800678a:	4605      	mov	r5, r0
 800678c:	4630      	mov	r0, r6
 800678e:	f7ff f9bf 	bl	8005b10 <_malloc_r>
 8006792:	b948      	cbnz	r0, 80067a8 <__smakebuf_r+0x44>
 8006794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d4ef      	bmi.n	800677c <__smakebuf_r+0x18>
 800679c:	f023 0303 	bic.w	r3, r3, #3
 80067a0:	f043 0302 	orr.w	r3, r3, #2
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	e7e3      	b.n	8006770 <__smakebuf_r+0xc>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	6020      	str	r0, [r4, #0]
 80067ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	9b00      	ldr	r3, [sp, #0]
 80067b4:	6163      	str	r3, [r4, #20]
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	6120      	str	r0, [r4, #16]
 80067ba:	b15b      	cbz	r3, 80067d4 <__smakebuf_r+0x70>
 80067bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 f81d 	bl	8006800 <_isatty_r>
 80067c6:	b128      	cbz	r0, 80067d4 <__smakebuf_r+0x70>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f023 0303 	bic.w	r3, r3, #3
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	431d      	orrs	r5, r3
 80067d8:	81a5      	strh	r5, [r4, #12]
 80067da:	e7cf      	b.n	800677c <__smakebuf_r+0x18>

080067dc <_fstat_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4d07      	ldr	r5, [pc, #28]	; (80067fc <_fstat_r+0x20>)
 80067e0:	2300      	movs	r3, #0
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	f7fb f804 	bl	80017f6 <_fstat>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	d102      	bne.n	80067f8 <_fstat_r+0x1c>
 80067f2:	682b      	ldr	r3, [r5, #0]
 80067f4:	b103      	cbz	r3, 80067f8 <_fstat_r+0x1c>
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	bd38      	pop	{r3, r4, r5, pc}
 80067fa:	bf00      	nop
 80067fc:	20000370 	.word	0x20000370

08006800 <_isatty_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d06      	ldr	r5, [pc, #24]	; (800681c <_isatty_r+0x1c>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fb f803 	bl	8001816 <_isatty>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_isatty_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_isatty_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20000370 	.word	0x20000370

08006820 <_raise_r>:
 8006820:	291f      	cmp	r1, #31
 8006822:	b538      	push	{r3, r4, r5, lr}
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
 8006828:	d904      	bls.n	8006834 <_raise_r+0x14>
 800682a:	2316      	movs	r3, #22
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006836:	b112      	cbz	r2, 800683e <_raise_r+0x1e>
 8006838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800683c:	b94b      	cbnz	r3, 8006852 <_raise_r+0x32>
 800683e:	4620      	mov	r0, r4
 8006840:	f000 f830 	bl	80068a4 <_getpid_r>
 8006844:	462a      	mov	r2, r5
 8006846:	4601      	mov	r1, r0
 8006848:	4620      	mov	r0, r4
 800684a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800684e:	f000 b817 	b.w	8006880 <_kill_r>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d00a      	beq.n	800686c <_raise_r+0x4c>
 8006856:	1c59      	adds	r1, r3, #1
 8006858:	d103      	bne.n	8006862 <_raise_r+0x42>
 800685a:	2316      	movs	r3, #22
 800685c:	6003      	str	r3, [r0, #0]
 800685e:	2001      	movs	r0, #1
 8006860:	e7e7      	b.n	8006832 <_raise_r+0x12>
 8006862:	2400      	movs	r4, #0
 8006864:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006868:	4628      	mov	r0, r5
 800686a:	4798      	blx	r3
 800686c:	2000      	movs	r0, #0
 800686e:	e7e0      	b.n	8006832 <_raise_r+0x12>

08006870 <raise>:
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <raise+0xc>)
 8006872:	4601      	mov	r1, r0
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f7ff bfd3 	b.w	8006820 <_raise_r>
 800687a:	bf00      	nop
 800687c:	20000064 	.word	0x20000064

08006880 <_kill_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4d07      	ldr	r5, [pc, #28]	; (80068a0 <_kill_r+0x20>)
 8006884:	2300      	movs	r3, #0
 8006886:	4604      	mov	r4, r0
 8006888:	4608      	mov	r0, r1
 800688a:	4611      	mov	r1, r2
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	f7fa ff53 	bl	8001738 <_kill>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d102      	bne.n	800689c <_kill_r+0x1c>
 8006896:	682b      	ldr	r3, [r5, #0]
 8006898:	b103      	cbz	r3, 800689c <_kill_r+0x1c>
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	20000370 	.word	0x20000370

080068a4 <_getpid_r>:
 80068a4:	f7fa bf40 	b.w	8001728 <_getpid>

080068a8 <_init>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	bf00      	nop
 80068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ae:	bc08      	pop	{r3}
 80068b0:	469e      	mov	lr, r3
 80068b2:	4770      	bx	lr

080068b4 <_fini>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr
